{"ast":null,"code":"'use strict';\n\nvar hasSymbols = require('has-symbols')();\n\nvar ES2015 = require('./es2015');\n\nvar assign = require('./helpers/assign');\n\nvar callBound = require('./helpers/callBound');\n\nvar $arrayPush = callBound('Array.prototype.push');\nvar $arraySlice = callBound('Array.prototype.slice');\nvar $arrayJoin = callBound('Array.prototype.join');\nvar ES2016 = assign(assign({}, ES2015), {\n  // https://www.ecma-international.org/ecma-262/7.0/#sec-samevaluenonnumber\n  SameValueNonNumber: function SameValueNonNumber(x, y) {\n    if (typeof x === 'number' || typeof x !== typeof y) {\n      throw new TypeError('SameValueNonNumber requires two non-number values of the same type.');\n    }\n\n    return this.SameValue(x, y);\n  },\n  // https://www.ecma-international.org/ecma-262/7.0/#sec-iterabletoarraylike\n  IterableToArrayLike: function IterableToArrayLike(items) {\n    var usingIterator;\n\n    if (hasSymbols) {\n      usingIterator = this.GetMethod(items, Symbol.iterator);\n    } else if (this.IsArray(items)) {\n      usingIterator = function () {\n        var i = -1;\n        var arr = this; // eslint-disable-line no-invalid-this\n\n        return {\n          next: function () {\n            i += 1;\n            return {\n              done: i >= arr.length,\n              value: arr[i]\n            };\n          }\n        };\n      };\n    } else if (this.Type(items) === 'String') {\n      var ES = this;\n\n      usingIterator = function () {\n        var i = 0;\n        return {\n          next: function () {\n            var nextIndex = ES.AdvanceStringIndex(items, i, true);\n            var value = $arrayJoin($arraySlice(items, i, nextIndex), '');\n            i = nextIndex;\n            return {\n              done: nextIndex > items.length,\n              value: value\n            };\n          }\n        };\n      };\n    }\n\n    if (typeof usingIterator !== 'undefined') {\n      var iterator = this.GetIterator(items, usingIterator);\n      var values = [];\n      var next = true;\n\n      while (next) {\n        next = this.IteratorStep(iterator);\n\n        if (next) {\n          var nextValue = this.IteratorValue(next);\n          $arrayPush(values, nextValue);\n        }\n      }\n\n      return values;\n    }\n\n    return this.ToObject(items);\n  }\n});\nmodule.exports = ES2016;","map":null,"metadata":{},"sourceType":"script"}