{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = mutuallyExclusiveTrue;\n\nvar _propTypes = require(\"prop-types\");\n\nvar _wrapValidator = _interopRequireDefault(require(\"./helpers/wrapValidator\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction mutuallyExclusiveTrue() {\n  for (var _len = arguments.length, exclusiveProps = new Array(_len), _key = 0; _key < _len; _key++) {\n    exclusiveProps[_key] = arguments[_key];\n  }\n\n  if (exclusiveProps.length < 1) {\n    throw new TypeError('at least one prop that is mutually exclusive is required');\n  }\n\n  if (!exclusiveProps.every(function (x) {\n    return typeof x === 'string';\n  })) {\n    throw new TypeError('all exclusive true props must be strings');\n  }\n\n  var propsList = exclusiveProps.join(', or ');\n\n  var validator = function mutuallyExclusiveTrueProps(props, propName, componentName) {\n    var countProps = function countProps(count, prop) {\n      return count + (props[prop] ? 1 : 0);\n    };\n\n    var exclusivePropCount = exclusiveProps.reduce(countProps, 0);\n\n    if (exclusivePropCount > 1) {\n      return new Error(\"A \".concat(componentName, \" cannot have more than one of these boolean props be true: \").concat(propsList));\n    }\n\n    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n      rest[_key2 - 3] = arguments[_key2];\n    }\n\n    return _propTypes.bool.apply(void 0, [props, propName, componentName].concat(rest));\n  };\n\n  validator.isRequired = function mutuallyExclusiveTruePropsRequired(props, propName, componentName) {\n    var countProps = function countProps(count, prop) {\n      return count + (props[prop] ? 1 : 0);\n    };\n\n    var exclusivePropCount = exclusiveProps.reduce(countProps, 0);\n\n    if (exclusivePropCount > 1) {\n      return new Error(\"A \".concat(componentName, \" cannot have more than one of these boolean props be true: \").concat(propsList));\n    }\n\n    for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {\n      rest[_key3 - 3] = arguments[_key3];\n    }\n\n    return _propTypes.bool.isRequired.apply(_propTypes.bool, [props, propName, componentName].concat(rest));\n  };\n\n  return (0, _wrapValidator[\"default\"])(validator, \"mutuallyExclusiveTrueProps: \".concat(propsList), exclusiveProps);\n}","map":null,"metadata":{},"sourceType":"script"}