{"ast":null,"code":"'use strict';\n\nvar trimStart = require('string.prototype.trimleft');\n\nvar trimEnd = require('string.prototype.trimright');\n\nvar inspect = require('object-inspect');\n\nvar ES2018 = require('./es2018');\n\nvar assign = require('./helpers/assign');\n\nvar MAX_SAFE_INTEGER = require('./helpers/maxSafeInteger');\n\nvar GetIntrinsic = require('./GetIntrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar ES2019 = assign(assign({}, ES2018), {\n  // https://tc39.es/ecma262/#sec-add-entries-from-iterable\n  AddEntriesFromIterable: function AddEntriesFromIterable(target, iterable, adder) {\n    if (!this.IsCallable(adder)) {\n      throw new $TypeError('Assertion failed: `adder` is not callable');\n    }\n\n    if (iterable == null) {\n      throw new $TypeError('Assertion failed: `iterable` is present, and not nullish');\n    }\n\n    var iteratorRecord = this.GetIterator(iterable);\n\n    while (true) {\n      // eslint-disable-line no-constant-condition\n      var next = this.IteratorStep(iteratorRecord);\n\n      if (!next) {\n        return target;\n      }\n\n      var nextItem = this.IteratorValue(next);\n\n      if (this.Type(nextItem) !== 'Object') {\n        var error = new $TypeError('iterator next must return an Object, got ' + inspect(nextItem));\n        return this.IteratorClose(iteratorRecord, function () {\n          throw error;\n        } // eslint-disable-line no-loop-func\n        );\n      }\n\n      try {\n        var k = this.Get(nextItem, '0');\n        var v = this.Get(nextItem, '1');\n        this.Call(adder, target, [k, v]);\n      } catch (e) {\n        return this.IteratorClose(iteratorRecord, function () {\n          throw e;\n        } // eslint-disable-line no-loop-func\n        );\n      }\n    }\n  },\n  // https://ecma-international.org/ecma-262/10.0/#sec-flattenintoarray\n  // eslint-disable-next-line max-params, max-statements\n  FlattenIntoArray: function FlattenIntoArray(target, source, sourceLen, start, depth) {\n    var mapperFunction;\n\n    if (arguments.length > 5) {\n      mapperFunction = arguments[5];\n    }\n\n    var targetIndex = start;\n    var sourceIndex = 0;\n\n    while (sourceIndex < sourceLen) {\n      var P = this.ToString(sourceIndex);\n      var exists = this.HasProperty(source, P);\n\n      if (exists === true) {\n        var element = this.Get(source, P);\n\n        if (typeof mapperFunction !== 'undefined') {\n          if (arguments.length <= 6) {\n            throw new $TypeError('Assertion failed: thisArg is required when mapperFunction is provided');\n          }\n\n          element = this.Call(mapperFunction, arguments[6], [element, sourceIndex, source]);\n        }\n\n        var shouldFlatten = false;\n\n        if (depth > 0) {\n          shouldFlatten = this.IsArray(element);\n        }\n\n        if (shouldFlatten) {\n          var elementLen = this.ToLength(this.Get(element, 'length'));\n          targetIndex = this.FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1);\n        } else {\n          if (targetIndex >= MAX_SAFE_INTEGER) {\n            throw new $TypeError('index too large');\n          }\n\n          this.CreateDataPropertyOrThrow(target, this.ToString(targetIndex), element);\n          targetIndex += 1;\n        }\n      }\n\n      sourceIndex += 1;\n    }\n\n    return targetIndex;\n  },\n  // https://ecma-international.org/ecma-262/10.0/#sec-trimstring\n  TrimString: function TrimString(string, where) {\n    var str = this.RequireObjectCoercible(string);\n    var S = this.ToString(str);\n    var T;\n\n    if (where === 'start') {\n      T = trimStart(S);\n    } else if (where === 'end') {\n      T = trimEnd(S);\n    } else if (where === 'start+end') {\n      T = trimStart(trimEnd(S));\n    } else {\n      throw new $TypeError('Assertion failed: invalid `where` value; must be \"start\", \"end\", or \"start+end\"');\n    }\n\n    return T;\n  }\n});\nmodule.exports = ES2019;","map":null,"metadata":{},"sourceType":"script"}