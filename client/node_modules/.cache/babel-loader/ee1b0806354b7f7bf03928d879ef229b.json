{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = mutuallyExclusiveOfType;\n\nvar _wrapValidator = _interopRequireDefault(require(\"./helpers/wrapValidator\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction mutuallyExclusiveOfType(propType) {\n  if (typeof propType !== 'function') {\n    throw new TypeError('a propType is required');\n  }\n\n  for (var _len = arguments.length, exclusiveProps = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    exclusiveProps[_key - 1] = arguments[_key];\n  }\n\n  if (exclusiveProps.length < 1) {\n    throw new TypeError('at least one prop that is mutually exclusive with this propType is required');\n  }\n\n  var propList = exclusiveProps.join(', or ');\n  var map = exclusiveProps.reduce(function (acc, prop) {\n    return _objectSpread({}, acc, _defineProperty({}, prop, true));\n  }, {});\n\n  var countProps = function countProps(count, prop) {\n    return count + (map[prop] ? 1 : 0);\n  };\n\n  var validator = function mutuallyExclusiveProps(props, propName, componentName) {\n    var exclusivePropCount = Object.keys(props).filter(function (prop) {\n      return props[prop] != null;\n    }).reduce(countProps, 0);\n\n    if (exclusivePropCount > 1) {\n      return new Error(\"A \".concat(componentName, \" cannot have more than one of these props: \").concat(propList));\n    }\n\n    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n      rest[_key2 - 3] = arguments[_key2];\n    }\n\n    return propType.apply(void 0, [props, propName, componentName].concat(rest));\n  };\n\n  validator.isRequired = function mutuallyExclusivePropsRequired(props, propName, componentName) {\n    var exclusivePropCount = Object.keys(props).filter(function (prop) {\n      return prop === propName || props[prop] != null;\n    }).reduce(countProps, 0);\n\n    if (exclusivePropCount > 1) {\n      return new Error(\"A \".concat(componentName, \" cannot have more than one of these props: \").concat(propList));\n    }\n\n    for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {\n      rest[_key3 - 3] = arguments[_key3];\n    }\n\n    return propType.apply(void 0, [props, propName, componentName].concat(rest));\n  };\n\n  return (0, _wrapValidator[\"default\"])(validator, \"mutuallyExclusiveProps:\".concat(propList), exclusiveProps);\n}","map":null,"metadata":{},"sourceType":"script"}