{"ast":null,"code":"'use strict';\n\nvar has = require('has');\n\nvar toPrimitive = require('es-to-primitive/es6');\n\nvar keys = require('object-keys');\n\nvar inspect = require('object-inspect');\n\nvar GetIntrinsic = require('./GetIntrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $RangeError = GetIntrinsic('%RangeError%');\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\nvar $Array = GetIntrinsic('%Array%');\nvar $ArrayPrototype = $Array.prototype;\nvar $String = GetIntrinsic('%String%');\nvar $Object = GetIntrinsic('%Object%');\nvar $Number = GetIntrinsic('%Number%');\nvar $Symbol = GetIntrinsic('%Symbol%', true);\nvar $RegExp = GetIntrinsic('%RegExp%');\nvar $Date = GetIntrinsic('%Date%');\nvar $preventExtensions = $Object.preventExtensions;\n\nvar hasSymbols = require('has-symbols')();\n\nvar assertRecord = require('./helpers/assertRecord');\n\nvar $isNaN = require('./helpers/isNaN');\n\nvar $isFinite = require('./helpers/isFinite');\n\nvar MAX_ARRAY_LENGTH = Math.pow(2, 32) - 1;\n\nvar MAX_SAFE_INTEGER = require('./helpers/maxSafeInteger');\n\nvar assign = require('./helpers/assign');\n\nvar sign = require('./helpers/sign');\n\nvar mod = require('./helpers/mod');\n\nvar isPrimitive = require('./helpers/isPrimitive');\n\nvar forEach = require('./helpers/forEach');\n\nvar every = require('./helpers/every');\n\nvar isSamePropertyDescriptor = require('./helpers/isSamePropertyDescriptor');\n\nvar isPropertyDescriptor = require('./helpers/isPropertyDescriptor');\n\nvar parseInteger = parseInt;\n\nvar callBound = require('./helpers/callBound');\n\nvar regexTester = require('./helpers/regexTester');\n\nvar $PromiseThen = callBound('Promise.prototype.then', true);\nvar arraySlice = callBound('Array.prototype.slice');\nvar strSlice = callBound('String.prototype.slice');\nvar isBinary = regexTester(/^0b[01]+$/i);\nvar isOctal = regexTester(/^0o[0-7]+$/i);\nvar isDigit = regexTester(/^[0-9]$/);\nvar regexExec = callBound('RegExp.prototype.exec');\nvar nonWS = ['\\u0085', '\\u200b', '\\ufffe'].join('');\nvar nonWSregex = new $RegExp('[' + nonWS + ']', 'g');\nvar hasNonWS = regexTester(nonWSregex);\nvar isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);\nvar $charCodeAt = callBound('String.prototype.charCodeAt');\nvar $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');\nvar toStr = callBound('Object.prototype.toString');\nvar $NumberValueOf = callBound('Number.prototype.valueOf');\nvar $BooleanValueOf = callBound('Boolean.prototype.valueOf');\nvar $StringValueOf = callBound('String.prototype.valueOf');\nvar $DateValueOf = callBound('Date.prototype.valueOf');\nvar $SymbolToString = callBound('Symbol.prototype.toString', true);\nvar $floor = Math.floor;\nvar $abs = Math.abs;\nvar $ObjectCreate = $Object.create;\nvar $gOPD = $Object.getOwnPropertyDescriptor;\nvar $gOPN = $Object.getOwnPropertyNames;\nvar $gOPS = $Object.getOwnPropertySymbols;\nvar $isExtensible = $Object.isExtensible;\nvar $defineProperty = $Object.defineProperty;\nvar $setProto = Object.setPrototypeOf || ( // eslint-disable-next-line no-proto, no-negated-condition\n[].__proto__ !== Array.prototype ? null : function (O, proto) {\n  O.__proto__ = proto; // eslint-disable-line no-proto\n\n  return O;\n});\n\nvar DefineOwnProperty = function DefineOwnProperty(ES, O, P, desc) {\n  if (!$defineProperty) {\n    if (!ES.IsDataDescriptor(desc)) {\n      // ES3 does not support getters/setters\n      return false;\n    }\n\n    if (!desc['[[Configurable]]'] || !desc['[[Writable]]']) {\n      return false;\n    } // fallback for ES3\n\n\n    if (P in O && $isEnumerable(O, P) !== !!desc['[[Enumerable]]']) {\n      // a non-enumerable existing property\n      return false;\n    } // property does not exist at all, or exists but is enumerable\n\n\n    var V = desc['[[Value]]'];\n    O[P] = V; // will use [[Define]]\n\n    return ES.SameValue(O[P], V);\n  }\n\n  $defineProperty(O, P, ES.FromPropertyDescriptor(desc));\n  return true;\n}; // whitespace from: https://es5.github.io/#x15.5.4.20\n// implementation from https://github.com/es-shims/es5-shim/blob/v3.4.0/es5-shim.js#L1304-L1324\n\n\nvar ws = ['\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003', '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028', '\\u2029\\uFEFF'].join('');\nvar trimRegex = new RegExp('(^[' + ws + ']+)|([' + ws + ']+$)', 'g');\nvar $replace = callBound('String.prototype.replace');\n\nvar trim = function (value) {\n  return $replace(value, trimRegex, '');\n};\n\nvar ES5 = require('./es5');\n\nvar hasRegExpMatcher = require('is-regex'); // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-abstract-operations\n\n\nvar ES6 = assign(assign({}, ES5), {\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-call-f-v-args\n  Call: function Call(F, V) {\n    var args = arguments.length > 2 ? arguments[2] : [];\n\n    if (!this.IsCallable(F)) {\n      throw new $TypeError(inspect(F) + ' is not a function');\n    }\n\n    return F.apply(V, args);\n  },\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toprimitive\n  ToPrimitive: toPrimitive,\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toboolean\n  // ToBoolean: ES5.ToBoolean,\n  // https://ecma-international.org/ecma-262/6.0/#sec-tonumber\n  ToNumber: function ToNumber(argument) {\n    var value = isPrimitive(argument) ? argument : toPrimitive(argument, $Number);\n\n    if (typeof value === 'symbol') {\n      throw new $TypeError('Cannot convert a Symbol value to a number');\n    }\n\n    if (typeof value === 'string') {\n      if (isBinary(value)) {\n        return this.ToNumber(parseInteger(strSlice(value, 2), 2));\n      } else if (isOctal(value)) {\n        return this.ToNumber(parseInteger(strSlice(value, 2), 8));\n      } else if (hasNonWS(value) || isInvalidHexLiteral(value)) {\n        return NaN;\n      } else {\n        var trimmed = trim(value);\n\n        if (trimmed !== value) {\n          return this.ToNumber(trimmed);\n        }\n      }\n    }\n\n    return $Number(value);\n  },\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tointeger\n  // ToInteger: ES5.ToNumber,\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toint32\n  // ToInt32: ES5.ToInt32,\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint32\n  // ToUint32: ES5.ToUint32,\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toint16\n  ToInt16: function ToInt16(argument) {\n    var int16bit = this.ToUint16(argument);\n    return int16bit >= 0x8000 ? int16bit - 0x10000 : int16bit;\n  },\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint16\n  // ToUint16: ES5.ToUint16,\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toint8\n  ToInt8: function ToInt8(argument) {\n    var int8bit = this.ToUint8(argument);\n    return int8bit >= 0x80 ? int8bit - 0x100 : int8bit;\n  },\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint8\n  ToUint8: function ToUint8(argument) {\n    var number = this.ToNumber(argument);\n\n    if ($isNaN(number) || number === 0 || !$isFinite(number)) {\n      return 0;\n    }\n\n    var posInt = sign(number) * $floor($abs(number));\n    return mod(posInt, 0x100);\n  },\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint8clamp\n  ToUint8Clamp: function ToUint8Clamp(argument) {\n    var number = this.ToNumber(argument);\n\n    if ($isNaN(number) || number <= 0) {\n      return 0;\n    }\n\n    if (number >= 0xFF) {\n      return 0xFF;\n    }\n\n    var f = $floor(argument);\n\n    if (f + 0.5 < number) {\n      return f + 1;\n    }\n\n    if (number < f + 0.5) {\n      return f;\n    }\n\n    if (f % 2 !== 0) {\n      return f + 1;\n    }\n\n    return f;\n  },\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tostring\n  ToString: function ToString(argument) {\n    if (typeof argument === 'symbol') {\n      throw new $TypeError('Cannot convert a Symbol value to a string');\n    }\n\n    return $String(argument);\n  },\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toobject\n  ToObject: function ToObject(value) {\n    this.RequireObjectCoercible(value);\n    return $Object(value);\n  },\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey\n  ToPropertyKey: function ToPropertyKey(argument) {\n    var key = this.ToPrimitive(argument, $String);\n    return typeof key === 'symbol' ? key : this.ToString(key);\n  },\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  ToLength: function ToLength(argument) {\n    var len = this.ToInteger(argument);\n\n    if (len <= 0) {\n      return 0;\n    } // includes converting -0 to +0\n\n\n    if (len > MAX_SAFE_INTEGER) {\n      return MAX_SAFE_INTEGER;\n    }\n\n    return len;\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-canonicalnumericindexstring\n  CanonicalNumericIndexString: function CanonicalNumericIndexString(argument) {\n    if (toStr(argument) !== '[object String]') {\n      throw new $TypeError('must be a string');\n    }\n\n    if (argument === '-0') {\n      return -0;\n    }\n\n    var n = this.ToNumber(argument);\n\n    if (this.SameValue(this.ToString(n), argument)) {\n      return n;\n    }\n\n    return void 0;\n  },\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-requireobjectcoercible\n  RequireObjectCoercible: ES5.CheckObjectCoercible,\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray\n  IsArray: $Array.isArray || function IsArray(argument) {\n    return toStr(argument) === '[object Array]';\n  },\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-iscallable\n  // IsCallable: ES5.IsCallable,\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor\n  IsConstructor: function IsConstructor(argument) {\n    return typeof argument === 'function' && !!argument.prototype; // unfortunately there's no way to truly check this without try/catch `new argument`\n  },\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isextensible-o\n  IsExtensible: $preventExtensions ? function IsExtensible(obj) {\n    if (isPrimitive(obj)) {\n      return false;\n    }\n\n    return $isExtensible(obj);\n  } : function isExtensible(obj) {\n    return true;\n  },\n  // eslint-disable-line no-unused-vars\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isinteger\n  IsInteger: function IsInteger(argument) {\n    if (typeof argument !== 'number' || $isNaN(argument) || !$isFinite(argument)) {\n      return false;\n    }\n\n    var abs = $abs(argument);\n    return $floor(abs) === abs;\n  },\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ispropertykey\n  IsPropertyKey: function IsPropertyKey(argument) {\n    return typeof argument === 'string' || typeof argument === 'symbol';\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-isregexp\n  IsRegExp: function IsRegExp(argument) {\n    if (!argument || typeof argument !== 'object') {\n      return false;\n    }\n\n    if (hasSymbols) {\n      var isRegExp = argument[$Symbol.match];\n\n      if (typeof isRegExp !== 'undefined') {\n        return ES5.ToBoolean(isRegExp);\n      }\n    }\n\n    return hasRegExpMatcher(argument);\n  },\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevalue\n  // SameValue: ES5.SameValue,\n  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero\n  SameValueZero: function SameValueZero(x, y) {\n    return x === y || $isNaN(x) && $isNaN(y);\n  },\n\n  /**\n   * 7.3.2 GetV (V, P)\n   * 1. Assert: IsPropertyKey(P) is true.\n   * 2. Let O be ToObject(V).\n   * 3. ReturnIfAbrupt(O).\n   * 4. Return O.[[Get]](P, V).\n   */\n  GetV: function GetV(V, P) {\n    // 7.3.2.1\n    if (!this.IsPropertyKey(P)) {\n      throw new $TypeError('Assertion failed: IsPropertyKey(P) is not true');\n    } // 7.3.2.2-3\n\n\n    var O = this.ToObject(V); // 7.3.2.4\n\n    return O[P];\n  },\n\n  /**\n   * 7.3.9 - https://ecma-international.org/ecma-262/6.0/#sec-getmethod\n   * 1. Assert: IsPropertyKey(P) is true.\n   * 2. Let func be GetV(O, P).\n   * 3. ReturnIfAbrupt(func).\n   * 4. If func is either undefined or null, return undefined.\n   * 5. If IsCallable(func) is false, throw a TypeError exception.\n   * 6. Return func.\n   */\n  GetMethod: function GetMethod(O, P) {\n    // 7.3.9.1\n    if (!this.IsPropertyKey(P)) {\n      throw new $TypeError('Assertion failed: IsPropertyKey(P) is not true');\n    } // 7.3.9.2\n\n\n    var func = this.GetV(O, P); // 7.3.9.4\n\n    if (func == null) {\n      return void 0;\n    } // 7.3.9.5\n\n\n    if (!this.IsCallable(func)) {\n      throw new $TypeError(P + 'is not a function');\n    } // 7.3.9.6\n\n\n    return func;\n  },\n\n  /**\n   * 7.3.1 Get (O, P) - https://ecma-international.org/ecma-262/6.0/#sec-get-o-p\n   * 1. Assert: Type(O) is Object.\n   * 2. Assert: IsPropertyKey(P) is true.\n   * 3. Return O.[[Get]](P, O).\n   */\n  Get: function Get(O, P) {\n    // 7.3.1.1\n    if (this.Type(O) !== 'Object') {\n      throw new $TypeError('Assertion failed: Type(O) is not Object');\n    } // 7.3.1.2\n\n\n    if (!this.IsPropertyKey(P)) {\n      throw new $TypeError('Assertion failed: IsPropertyKey(P) is not true, got ' + inspect(P));\n    } // 7.3.1.3\n\n\n    return O[P];\n  },\n  Type: function Type(x) {\n    if (typeof x === 'symbol') {\n      return 'Symbol';\n    }\n\n    return ES5.Type(x);\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-speciesconstructor\n  SpeciesConstructor: function SpeciesConstructor(O, defaultConstructor) {\n    if (this.Type(O) !== 'Object') {\n      throw new $TypeError('Assertion failed: Type(O) is not Object');\n    }\n\n    var C = O.constructor;\n\n    if (typeof C === 'undefined') {\n      return defaultConstructor;\n    }\n\n    if (this.Type(C) !== 'Object') {\n      throw new $TypeError('O.constructor is not an Object');\n    }\n\n    var S = hasSymbols && $Symbol.species ? C[$Symbol.species] : void 0;\n\n    if (S == null) {\n      return defaultConstructor;\n    }\n\n    if (this.IsConstructor(S)) {\n      return S;\n    }\n\n    throw new $TypeError('no constructor found');\n  },\n  // https://www.ecma-international.org/ecma-262/6.0/#sec-frompropertydescriptor\n  FromPropertyDescriptor: function FromPropertyDescriptor(Desc) {\n    if (typeof Desc === 'undefined') {\n      return Desc;\n    }\n\n    assertRecord(this, 'Property Descriptor', 'Desc', Desc);\n    var obj = {};\n\n    if ('[[Value]]' in Desc) {\n      obj.value = Desc['[[Value]]'];\n    }\n\n    if ('[[Writable]]' in Desc) {\n      obj.writable = Desc['[[Writable]]'];\n    }\n\n    if ('[[Get]]' in Desc) {\n      obj.get = Desc['[[Get]]'];\n    }\n\n    if ('[[Set]]' in Desc) {\n      obj.set = Desc['[[Set]]'];\n    }\n\n    if ('[[Enumerable]]' in Desc) {\n      obj.enumerable = Desc['[[Enumerable]]'];\n    }\n\n    if ('[[Configurable]]' in Desc) {\n      obj.configurable = Desc['[[Configurable]]'];\n    }\n\n    return obj;\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-completepropertydescriptor\n  CompletePropertyDescriptor: function CompletePropertyDescriptor(Desc) {\n    assertRecord(this, 'Property Descriptor', 'Desc', Desc);\n\n    if (this.IsGenericDescriptor(Desc) || this.IsDataDescriptor(Desc)) {\n      if (!has(Desc, '[[Value]]')) {\n        Desc['[[Value]]'] = void 0;\n      }\n\n      if (!has(Desc, '[[Writable]]')) {\n        Desc['[[Writable]]'] = false;\n      }\n    } else {\n      if (!has(Desc, '[[Get]]')) {\n        Desc['[[Get]]'] = void 0;\n      }\n\n      if (!has(Desc, '[[Set]]')) {\n        Desc['[[Set]]'] = void 0;\n      }\n    }\n\n    if (!has(Desc, '[[Enumerable]]')) {\n      Desc['[[Enumerable]]'] = false;\n    }\n\n    if (!has(Desc, '[[Configurable]]')) {\n      Desc['[[Configurable]]'] = false;\n    }\n\n    return Desc;\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-set-o-p-v-throw\n  Set: function Set(O, P, V, Throw) {\n    if (this.Type(O) !== 'Object') {\n      throw new $TypeError('O must be an Object');\n    }\n\n    if (!this.IsPropertyKey(P)) {\n      throw new $TypeError('P must be a Property Key');\n    }\n\n    if (this.Type(Throw) !== 'Boolean') {\n      throw new $TypeError('Throw must be a Boolean');\n    }\n\n    if (Throw) {\n      O[P] = V;\n      return true;\n    } else {\n      try {\n        O[P] = V;\n      } catch (e) {\n        return false;\n      }\n    }\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-hasownproperty\n  HasOwnProperty: function HasOwnProperty(O, P) {\n    if (this.Type(O) !== 'Object') {\n      throw new $TypeError('O must be an Object');\n    }\n\n    if (!this.IsPropertyKey(P)) {\n      throw new $TypeError('P must be a Property Key');\n    }\n\n    return has(O, P);\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-hasproperty\n  HasProperty: function HasProperty(O, P) {\n    if (this.Type(O) !== 'Object') {\n      throw new $TypeError('O must be an Object');\n    }\n\n    if (!this.IsPropertyKey(P)) {\n      throw new $TypeError('P must be a Property Key');\n    }\n\n    return P in O;\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-isconcatspreadable\n  IsConcatSpreadable: function IsConcatSpreadable(O) {\n    if (this.Type(O) !== 'Object') {\n      return false;\n    }\n\n    if (hasSymbols && typeof $Symbol.isConcatSpreadable === 'symbol') {\n      var spreadable = this.Get(O, Symbol.isConcatSpreadable);\n\n      if (typeof spreadable !== 'undefined') {\n        return this.ToBoolean(spreadable);\n      }\n    }\n\n    return this.IsArray(O);\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-invoke\n  Invoke: function Invoke(O, P) {\n    if (!this.IsPropertyKey(P)) {\n      throw new $TypeError('P must be a Property Key');\n    }\n\n    var argumentsList = arraySlice(arguments, 2);\n    var func = this.GetV(O, P);\n    return this.Call(func, O, argumentsList);\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-getiterator\n  GetIterator: function GetIterator(obj, method) {\n    var actualMethod = method;\n\n    if (arguments.length < 2) {\n      if (!hasSymbols) {\n        throw new SyntaxError('GetIterator depends on native Symbol support when `method` is not passed');\n      }\n\n      actualMethod = this.GetMethod(obj, $Symbol.iterator);\n    }\n\n    var iterator = this.Call(actualMethod, obj);\n\n    if (this.Type(iterator) !== 'Object') {\n      throw new $TypeError('iterator must return an object');\n    }\n\n    return iterator;\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-iteratornext\n  IteratorNext: function IteratorNext(iterator, value) {\n    var result = this.Invoke(iterator, 'next', arguments.length < 2 ? [] : [value]);\n\n    if (this.Type(result) !== 'Object') {\n      throw new $TypeError('iterator next must return an object');\n    }\n\n    return result;\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-iteratorcomplete\n  IteratorComplete: function IteratorComplete(iterResult) {\n    if (this.Type(iterResult) !== 'Object') {\n      throw new $TypeError('Assertion failed: Type(iterResult) is not Object');\n    }\n\n    return this.ToBoolean(this.Get(iterResult, 'done'));\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-iteratorvalue\n  IteratorValue: function IteratorValue(iterResult) {\n    if (this.Type(iterResult) !== 'Object') {\n      throw new $TypeError('Assertion failed: Type(iterResult) is not Object');\n    }\n\n    return this.Get(iterResult, 'value');\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-iteratorstep\n  IteratorStep: function IteratorStep(iterator) {\n    var result = this.IteratorNext(iterator);\n    var done = this.IteratorComplete(result);\n    return done === true ? false : result;\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-iteratorclose\n  IteratorClose: function IteratorClose(iterator, completion) {\n    if (this.Type(iterator) !== 'Object') {\n      throw new $TypeError('Assertion failed: Type(iterator) is not Object');\n    }\n\n    if (!this.IsCallable(completion)) {\n      throw new $TypeError('Assertion failed: completion is not a thunk for a Completion Record');\n    }\n\n    var completionThunk = completion;\n    var iteratorReturn = this.GetMethod(iterator, 'return');\n\n    if (typeof iteratorReturn === 'undefined') {\n      return completionThunk();\n    }\n\n    var completionRecord;\n\n    try {\n      var innerResult = this.Call(iteratorReturn, iterator, []);\n    } catch (e) {\n      // if we hit here, then \"e\" is the innerResult completion that needs re-throwing\n      // if the completion is of type \"throw\", this will throw.\n      completionRecord = completionThunk();\n      completionThunk = null; // ensure it's not called twice.\n      // if not, then return the innerResult completion\n\n      throw e;\n    }\n\n    completionRecord = completionThunk(); // if innerResult worked, then throw if the completion does\n\n    completionThunk = null; // ensure it's not called twice.\n\n    if (this.Type(innerResult) !== 'Object') {\n      throw new $TypeError('iterator .return must return an object');\n    }\n\n    return completionRecord;\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-createiterresultobject\n  CreateIterResultObject: function CreateIterResultObject(value, done) {\n    if (this.Type(done) !== 'Boolean') {\n      throw new $TypeError('Assertion failed: Type(done) is not Boolean');\n    }\n\n    return {\n      value: value,\n      done: done\n    };\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-regexpexec\n  RegExpExec: function RegExpExec(R, S) {\n    if (this.Type(R) !== 'Object') {\n      throw new $TypeError('R must be an Object');\n    }\n\n    if (this.Type(S) !== 'String') {\n      throw new $TypeError('S must be a String');\n    }\n\n    var exec = this.Get(R, 'exec');\n\n    if (this.IsCallable(exec)) {\n      var result = this.Call(exec, R, [S]);\n\n      if (result === null || this.Type(result) === 'Object') {\n        return result;\n      }\n\n      throw new $TypeError('\"exec\" method must return `null` or an Object');\n    }\n\n    return regexExec(R, S);\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-arrayspeciescreate\n  ArraySpeciesCreate: function ArraySpeciesCreate(originalArray, length) {\n    if (!this.IsInteger(length) || length < 0) {\n      throw new $TypeError('Assertion failed: length must be an integer >= 0');\n    }\n\n    var len = length === 0 ? 0 : length;\n    var C;\n    var isArray = this.IsArray(originalArray);\n\n    if (isArray) {\n      C = this.Get(originalArray, 'constructor'); // TODO: figure out how to make a cross-realm normal Array, a same-realm Array\n      // if (this.IsConstructor(C)) {\n      // \tif C is another realm's Array, C = undefined\n      // \tObject.getPrototypeOf(Object.getPrototypeOf(Object.getPrototypeOf(Array))) === null ?\n      // }\n\n      if (this.Type(C) === 'Object' && hasSymbols && $Symbol.species) {\n        C = this.Get(C, $Symbol.species);\n\n        if (C === null) {\n          C = void 0;\n        }\n      }\n    }\n\n    if (typeof C === 'undefined') {\n      return $Array(len);\n    }\n\n    if (!this.IsConstructor(C)) {\n      throw new $TypeError('C must be a constructor');\n    }\n\n    return new C(len); // this.Construct(C, len);\n  },\n  CreateDataProperty: function CreateDataProperty(O, P, V) {\n    if (this.Type(O) !== 'Object') {\n      throw new $TypeError('Assertion failed: Type(O) is not Object');\n    }\n\n    if (!this.IsPropertyKey(P)) {\n      throw new $TypeError('Assertion failed: IsPropertyKey(P) is not true');\n    }\n\n    var oldDesc = $gOPD(O, P);\n    var extensible = oldDesc || this.IsExtensible(O);\n    var immutable = oldDesc && (!oldDesc.writable || !oldDesc.configurable);\n\n    if (immutable || !extensible) {\n      return false;\n    }\n\n    return DefineOwnProperty(this, O, P, {\n      '[[Configurable]]': true,\n      '[[Enumerable]]': true,\n      '[[Value]]': V,\n      '[[Writable]]': true\n    });\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-createdatapropertyorthrow\n  CreateDataPropertyOrThrow: function CreateDataPropertyOrThrow(O, P, V) {\n    if (this.Type(O) !== 'Object') {\n      throw new $TypeError('Assertion failed: Type(O) is not Object');\n    }\n\n    if (!this.IsPropertyKey(P)) {\n      throw new $TypeError('Assertion failed: IsPropertyKey(P) is not true');\n    }\n\n    var success = this.CreateDataProperty(O, P, V);\n\n    if (!success) {\n      throw new $TypeError('unable to create data property');\n    }\n\n    return success;\n  },\n  // https://www.ecma-international.org/ecma-262/6.0/#sec-objectcreate\n  ObjectCreate: function ObjectCreate(proto, internalSlotsList) {\n    if (proto !== null && this.Type(proto) !== 'Object') {\n      throw new $TypeError('Assertion failed: proto must be null or an object');\n    }\n\n    var slots = arguments.length < 2 ? [] : internalSlotsList;\n\n    if (slots.length > 0) {\n      throw new $SyntaxError('es-abstract does not yet support internal slots');\n    }\n\n    if (proto === null && !$ObjectCreate) {\n      throw new $SyntaxError('native Object.create support is required to create null objects');\n    }\n\n    return $ObjectCreate(proto);\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-advancestringindex\n  AdvanceStringIndex: function AdvanceStringIndex(S, index, unicode) {\n    if (this.Type(S) !== 'String') {\n      throw new $TypeError('S must be a String');\n    }\n\n    if (!this.IsInteger(index) || index < 0 || index > MAX_SAFE_INTEGER) {\n      throw new $TypeError('Assertion failed: length must be an integer >= 0 and <= 2**53');\n    }\n\n    if (this.Type(unicode) !== 'Boolean') {\n      throw new $TypeError('Assertion failed: unicode must be a Boolean');\n    }\n\n    if (!unicode) {\n      return index + 1;\n    }\n\n    var length = S.length;\n\n    if (index + 1 >= length) {\n      return index + 1;\n    }\n\n    var first = $charCodeAt(S, index);\n\n    if (first < 0xD800 || first > 0xDBFF) {\n      return index + 1;\n    }\n\n    var second = $charCodeAt(S, index + 1);\n\n    if (second < 0xDC00 || second > 0xDFFF) {\n      return index + 1;\n    }\n\n    return index + 2;\n  },\n  // https://www.ecma-international.org/ecma-262/6.0/#sec-createmethodproperty\n  CreateMethodProperty: function CreateMethodProperty(O, P, V) {\n    if (this.Type(O) !== 'Object') {\n      throw new $TypeError('Assertion failed: Type(O) is not Object');\n    }\n\n    if (!this.IsPropertyKey(P)) {\n      throw new $TypeError('Assertion failed: IsPropertyKey(P) is not true');\n    }\n\n    var newDesc = {\n      '[[Configurable]]': true,\n      '[[Enumerable]]': false,\n      '[[Value]]': V,\n      '[[Writable]]': true\n    };\n    return DefineOwnProperty(this, O, P, newDesc);\n  },\n  // https://www.ecma-international.org/ecma-262/6.0/#sec-definepropertyorthrow\n  DefinePropertyOrThrow: function DefinePropertyOrThrow(O, P, desc) {\n    if (this.Type(O) !== 'Object') {\n      throw new $TypeError('Assertion failed: Type(O) is not Object');\n    }\n\n    if (!this.IsPropertyKey(P)) {\n      throw new $TypeError('Assertion failed: IsPropertyKey(P) is not true');\n    }\n\n    var Desc = isPropertyDescriptor(this, desc) ? desc : this.ToPropertyDescriptor(desc);\n\n    if (!isPropertyDescriptor(this, Desc)) {\n      throw new $TypeError('Assertion failed: Desc is not a valid Property Descriptor');\n    }\n\n    return DefineOwnProperty(this, O, P, Desc);\n  },\n  // https://www.ecma-international.org/ecma-262/6.0/#sec-deletepropertyorthrow\n  DeletePropertyOrThrow: function DeletePropertyOrThrow(O, P) {\n    if (this.Type(O) !== 'Object') {\n      throw new $TypeError('Assertion failed: Type(O) is not Object');\n    }\n\n    if (!this.IsPropertyKey(P)) {\n      throw new $TypeError('Assertion failed: IsPropertyKey(P) is not true');\n    }\n\n    var success = delete O[P];\n\n    if (!success) {\n      throw new TypeError('Attempt to delete property failed.');\n    }\n\n    return success;\n  },\n  // https://www.ecma-international.org/ecma-262/6.0/#sec-enumerableownnames\n  EnumerableOwnNames: function EnumerableOwnNames(O) {\n    if (this.Type(O) !== 'Object') {\n      throw new $TypeError('Assertion failed: Type(O) is not Object');\n    }\n\n    return keys(O);\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-number-prototype-object\n  thisNumberValue: function thisNumberValue(value) {\n    if (this.Type(value) === 'Number') {\n      return value;\n    }\n\n    return $NumberValueOf(value);\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-boolean-prototype-object\n  thisBooleanValue: function thisBooleanValue(value) {\n    if (this.Type(value) === 'Boolean') {\n      return value;\n    }\n\n    return $BooleanValueOf(value);\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-string-prototype-object\n  thisStringValue: function thisStringValue(value) {\n    if (this.Type(value) === 'String') {\n      return value;\n    }\n\n    return $StringValueOf(value);\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-date-prototype-object\n  thisTimeValue: function thisTimeValue(value) {\n    return $DateValueOf(value);\n  },\n  // https://www.ecma-international.org/ecma-262/6.0/#sec-setintegritylevel\n  SetIntegrityLevel: function SetIntegrityLevel(O, level) {\n    if (this.Type(O) !== 'Object') {\n      throw new $TypeError('Assertion failed: Type(O) is not Object');\n    }\n\n    if (level !== 'sealed' && level !== 'frozen') {\n      throw new $TypeError('Assertion failed: `level` must be `\"sealed\"` or `\"frozen\"`');\n    }\n\n    if (!$preventExtensions) {\n      throw new $SyntaxError('SetIntegrityLevel requires native `Object.preventExtensions` support');\n    }\n\n    var status = $preventExtensions(O);\n\n    if (!status) {\n      return false;\n    }\n\n    if (!$gOPN) {\n      throw new $SyntaxError('SetIntegrityLevel requires native `Object.getOwnPropertyNames` support');\n    }\n\n    var theKeys = $gOPN(O);\n    var ES = this;\n\n    if (level === 'sealed') {\n      forEach(theKeys, function (k) {\n        ES.DefinePropertyOrThrow(O, k, {\n          configurable: false\n        });\n      });\n    } else if (level === 'frozen') {\n      forEach(theKeys, function (k) {\n        var currentDesc = $gOPD(O, k);\n\n        if (typeof currentDesc !== 'undefined') {\n          var desc;\n\n          if (ES.IsAccessorDescriptor(ES.ToPropertyDescriptor(currentDesc))) {\n            desc = {\n              configurable: false\n            };\n          } else {\n            desc = {\n              configurable: false,\n              writable: false\n            };\n          }\n\n          ES.DefinePropertyOrThrow(O, k, desc);\n        }\n      });\n    }\n\n    return true;\n  },\n  // https://www.ecma-international.org/ecma-262/6.0/#sec-testintegritylevel\n  TestIntegrityLevel: function TestIntegrityLevel(O, level) {\n    if (this.Type(O) !== 'Object') {\n      throw new $TypeError('Assertion failed: Type(O) is not Object');\n    }\n\n    if (level !== 'sealed' && level !== 'frozen') {\n      throw new $TypeError('Assertion failed: `level` must be `\"sealed\"` or `\"frozen\"`');\n    }\n\n    var status = this.IsExtensible(O);\n\n    if (status) {\n      return false;\n    }\n\n    var theKeys = $gOPN(O);\n    var ES = this;\n    return theKeys.length === 0 || every(theKeys, function (k) {\n      var currentDesc = $gOPD(O, k);\n\n      if (typeof currentDesc !== 'undefined') {\n        if (currentDesc.configurable) {\n          return false;\n        }\n\n        if (level === 'frozen' && ES.IsDataDescriptor(ES.ToPropertyDescriptor(currentDesc)) && currentDesc.writable) {\n          return false;\n        }\n      }\n\n      return true;\n    });\n  },\n  // https://www.ecma-international.org/ecma-262/6.0/#sec-ordinaryhasinstance\n  OrdinaryHasInstance: function OrdinaryHasInstance(C, O) {\n    if (this.IsCallable(C) === false) {\n      return false;\n    }\n\n    if (this.Type(O) !== 'Object') {\n      return false;\n    }\n\n    var P = this.Get(C, 'prototype');\n\n    if (this.Type(P) !== 'Object') {\n      throw new $TypeError('OrdinaryHasInstance called on an object with an invalid prototype property.');\n    }\n\n    return O instanceof C;\n  },\n  // https://www.ecma-international.org/ecma-262/6.0/#sec-ordinaryhasproperty\n  OrdinaryHasProperty: function OrdinaryHasProperty(O, P) {\n    if (this.Type(O) !== 'Object') {\n      throw new $TypeError('Assertion failed: Type(O) is not Object');\n    }\n\n    if (!this.IsPropertyKey(P)) {\n      throw new $TypeError('Assertion failed: P must be a Property Key');\n    }\n\n    return P in O;\n  },\n  // https://www.ecma-international.org/ecma-262/6.0/#sec-instanceofoperator\n  InstanceofOperator: function InstanceofOperator(O, C) {\n    if (this.Type(O) !== 'Object') {\n      throw new $TypeError('Assertion failed: Type(O) is not Object');\n    }\n\n    var instOfHandler = hasSymbols && $Symbol.hasInstance ? this.GetMethod(C, $Symbol.hasInstance) : void 0;\n\n    if (typeof instOfHandler !== 'undefined') {\n      return this.ToBoolean(this.Call(instOfHandler, C, [O]));\n    }\n\n    if (!this.IsCallable(C)) {\n      throw new $TypeError('`C` is not Callable');\n    }\n\n    return this.OrdinaryHasInstance(C, O);\n  },\n  // https://www.ecma-international.org/ecma-262/6.0/#sec-ispromise\n  IsPromise: function IsPromise(x) {\n    if (this.Type(x) !== 'Object') {\n      return false;\n    }\n\n    if (!$PromiseThen) {\n      // Promises are not supported\n      return false;\n    }\n\n    try {\n      $PromiseThen(x); // throws if not a promise\n    } catch (e) {\n      return false;\n    }\n\n    return true;\n  },\n  // https://www.ecma-international.org/ecma-262/6.0/#sec-abstract-equality-comparison\n  'Abstract Equality Comparison': function AbstractEqualityComparison(x, y) {\n    var xType = this.Type(x);\n    var yType = this.Type(y);\n\n    if (xType === yType) {\n      return x === y; // ES6+ specified this shortcut anyways.\n    }\n\n    if (x == null && y == null) {\n      return true;\n    }\n\n    if (xType === 'Number' && yType === 'String') {\n      return this['Abstract Equality Comparison'](x, this.ToNumber(y));\n    }\n\n    if (xType === 'String' && yType === 'Number') {\n      return this['Abstract Equality Comparison'](this.ToNumber(x), y);\n    }\n\n    if (xType === 'Boolean') {\n      return this['Abstract Equality Comparison'](this.ToNumber(x), y);\n    }\n\n    if (yType === 'Boolean') {\n      return this['Abstract Equality Comparison'](x, this.ToNumber(y));\n    }\n\n    if ((xType === 'String' || xType === 'Number' || xType === 'Symbol') && yType === 'Object') {\n      return this['Abstract Equality Comparison'](x, this.ToPrimitive(y));\n    }\n\n    if (xType === 'Object' && (yType === 'String' || yType === 'Number' || yType === 'Symbol')) {\n      return this['Abstract Equality Comparison'](this.ToPrimitive(x), y);\n    }\n\n    return false;\n  },\n  // eslint-disable-next-line max-lines-per-function, max-statements, id-length, max-params\n  ValidateAndApplyPropertyDescriptor: function ValidateAndApplyPropertyDescriptor(O, P, extensible, Desc, current) {\n    // this uses the ES2017+ logic, since it fixes a number of bugs in the ES2015 logic.\n    var oType = this.Type(O);\n\n    if (oType !== 'Undefined' && oType !== 'Object') {\n      throw new $TypeError('Assertion failed: O must be undefined or an Object');\n    }\n\n    if (this.Type(extensible) !== 'Boolean') {\n      throw new $TypeError('Assertion failed: extensible must be a Boolean');\n    }\n\n    if (!isPropertyDescriptor(this, Desc)) {\n      throw new $TypeError('Assertion failed: Desc must be a Property Descriptor');\n    }\n\n    if (this.Type(current) !== 'Undefined' && !isPropertyDescriptor(this, current)) {\n      throw new $TypeError('Assertion failed: current must be a Property Descriptor, or undefined');\n    }\n\n    if (oType !== 'Undefined' && !this.IsPropertyKey(P)) {\n      throw new $TypeError('Assertion failed: if O is not undefined, P must be a Property Key');\n    }\n\n    if (this.Type(current) === 'Undefined') {\n      if (!extensible) {\n        return false;\n      }\n\n      if (this.IsGenericDescriptor(Desc) || this.IsDataDescriptor(Desc)) {\n        if (oType !== 'Undefined') {\n          DefineOwnProperty(this, O, P, {\n            '[[Configurable]]': Desc['[[Configurable]]'],\n            '[[Enumerable]]': Desc['[[Enumerable]]'],\n            '[[Value]]': Desc['[[Value]]'],\n            '[[Writable]]': Desc['[[Writable]]']\n          });\n        }\n      } else {\n        if (!this.IsAccessorDescriptor(Desc)) {\n          throw new $TypeError('Assertion failed: Desc is not an accessor descriptor');\n        }\n\n        if (oType !== 'Undefined') {\n          return DefineOwnProperty(this, O, P, Desc);\n        }\n      }\n\n      return true;\n    }\n\n    if (this.IsGenericDescriptor(Desc) && !('[[Configurable]]' in Desc) && !('[[Enumerable]]' in Desc)) {\n      return true;\n    }\n\n    if (isSamePropertyDescriptor(this, Desc, current)) {\n      return true; // removed by ES2017, but should still be correct\n    } // \"if every field in Desc is absent, return true\" can't really match the assertion that it's a Property Descriptor\n\n\n    if (!current['[[Configurable]]']) {\n      if (Desc['[[Configurable]]']) {\n        return false;\n      }\n\n      if ('[[Enumerable]]' in Desc && !Desc['[[Enumerable]]'] === !!current['[[Enumerable]]']) {\n        return false;\n      }\n    }\n\n    if (this.IsGenericDescriptor(Desc)) {// no further validation is required.\n    } else if (this.IsDataDescriptor(current) !== this.IsDataDescriptor(Desc)) {\n      if (!current['[[Configurable]]']) {\n        return false;\n      }\n\n      if (this.IsDataDescriptor(current)) {\n        if (oType !== 'Undefined') {\n          DefineOwnProperty(this, O, P, {\n            '[[Configurable]]': current['[[Configurable]]'],\n            '[[Enumerable]]': current['[[Enumerable]]'],\n            '[[Get]]': undefined\n          });\n        }\n      } else if (oType !== 'Undefined') {\n        DefineOwnProperty(this, O, P, {\n          '[[Configurable]]': current['[[Configurable]]'],\n          '[[Enumerable]]': current['[[Enumerable]]'],\n          '[[Value]]': undefined\n        });\n      }\n    } else if (this.IsDataDescriptor(current) && this.IsDataDescriptor(Desc)) {\n      if (!current['[[Configurable]]'] && !current['[[Writable]]']) {\n        if ('[[Writable]]' in Desc && Desc['[[Writable]]']) {\n          return false;\n        }\n\n        if ('[[Value]]' in Desc && !this.SameValue(Desc['[[Value]]'], current['[[Value]]'])) {\n          return false;\n        }\n\n        return true;\n      }\n    } else if (this.IsAccessorDescriptor(current) && this.IsAccessorDescriptor(Desc)) {\n      if (!current['[[Configurable]]']) {\n        if ('[[Set]]' in Desc && !this.SameValue(Desc['[[Set]]'], current['[[Set]]'])) {\n          return false;\n        }\n\n        if ('[[Get]]' in Desc && !this.SameValue(Desc['[[Get]]'], current['[[Get]]'])) {\n          return false;\n        }\n\n        return true;\n      }\n    } else {\n      throw new $TypeError('Assertion failed: current and Desc are not both data, both accessors, or one accessor and one data.');\n    }\n\n    if (oType !== 'Undefined') {\n      return DefineOwnProperty(this, O, P, Desc);\n    }\n\n    return true;\n  },\n  // https://www.ecma-international.org/ecma-262/6.0/#sec-ordinarydefineownproperty\n  OrdinaryDefineOwnProperty: function OrdinaryDefineOwnProperty(O, P, Desc) {\n    if (this.Type(O) !== 'Object') {\n      throw new $TypeError('Assertion failed: O must be an Object');\n    }\n\n    if (!this.IsPropertyKey(P)) {\n      throw new $TypeError('Assertion failed: P must be a Property Key');\n    }\n\n    if (!isPropertyDescriptor(this, Desc)) {\n      throw new $TypeError('Assertion failed: Desc must be a Property Descriptor');\n    }\n\n    var desc = $gOPD(O, P);\n    var current = desc && this.ToPropertyDescriptor(desc);\n    var extensible = this.IsExtensible(O);\n    return this.ValidateAndApplyPropertyDescriptor(O, P, extensible, Desc, current);\n  },\n  // https://www.ecma-international.org/ecma-262/6.0/#sec-ordinarygetownproperty\n  OrdinaryGetOwnProperty: function OrdinaryGetOwnProperty(O, P) {\n    if (this.Type(O) !== 'Object') {\n      throw new $TypeError('Assertion failed: O must be an Object');\n    }\n\n    if (!this.IsPropertyKey(P)) {\n      throw new $TypeError('Assertion failed: P must be a Property Key');\n    }\n\n    if (!has(O, P)) {\n      return void 0;\n    }\n\n    if (!$gOPD) {\n      // ES3 fallback\n      var arrayLength = this.IsArray(O) && P === 'length';\n      var regexLastIndex = this.IsRegExp(O) && P === 'lastIndex';\n      return {\n        '[[Configurable]]': !(arrayLength || regexLastIndex),\n        '[[Enumerable]]': $isEnumerable(O, P),\n        '[[Value]]': O[P],\n        '[[Writable]]': true\n      };\n    }\n\n    return this.ToPropertyDescriptor($gOPD(O, P));\n  },\n  // https://www.ecma-international.org/ecma-262/6.0/#sec-arraycreate\n  ArrayCreate: function ArrayCreate(length) {\n    if (!this.IsInteger(length) || length < 0) {\n      throw new $TypeError('Assertion failed: `length` must be an integer Number >= 0');\n    }\n\n    if (length > MAX_ARRAY_LENGTH) {\n      throw new $RangeError('length is greater than (2**32 - 1)');\n    }\n\n    var proto = arguments.length > 1 ? arguments[1] : $ArrayPrototype;\n    var A = []; // steps 5 - 7, and 9\n\n    if (proto !== $ArrayPrototype) {\n      // step 8\n      if (!$setProto) {\n        throw new $SyntaxError('ArrayCreate: a `proto` argument that is not `Array.prototype` is not supported in an environment that does not support setting the [[Prototype]]');\n      }\n\n      $setProto(A, proto);\n    }\n\n    if (length !== 0) {\n      // bypasses the need for step 2\n      A.length = length;\n    }\n    /* step 10, the above as a shortcut for the below\n    this.OrdinaryDefineOwnProperty(A, 'length', {\n    \t'[[Configurable]]': false,\n    \t'[[Enumerable]]': false,\n    \t'[[Value]]': length,\n    \t'[[Writable]]': true\n    });\n    */\n\n\n    return A;\n  },\n  // eslint-disable-next-line max-statements, max-lines-per-function\n  ArraySetLength: function ArraySetLength(A, Desc) {\n    if (!this.IsArray(A)) {\n      throw new $TypeError('Assertion failed: A must be an Array');\n    }\n\n    if (!isPropertyDescriptor(this, Desc)) {\n      throw new $TypeError('Assertion failed: Desc must be a Property Descriptor');\n    }\n\n    if (!('[[Value]]' in Desc)) {\n      return this.OrdinaryDefineOwnProperty(A, 'length', Desc);\n    }\n\n    var newLenDesc = assign({}, Desc);\n    var newLen = this.ToUint32(Desc['[[Value]]']);\n    var numberLen = this.ToNumber(Desc['[[Value]]']);\n\n    if (newLen !== numberLen) {\n      throw new $RangeError('Invalid array length');\n    }\n\n    newLenDesc['[[Value]]'] = newLen;\n    var oldLenDesc = this.OrdinaryGetOwnProperty(A, 'length');\n\n    if (!this.IsDataDescriptor(oldLenDesc)) {\n      throw new $TypeError('Assertion failed: an array had a non-data descriptor on `length`');\n    }\n\n    var oldLen = oldLenDesc['[[Value]]'];\n\n    if (newLen >= oldLen) {\n      return this.OrdinaryDefineOwnProperty(A, 'length', newLenDesc);\n    }\n\n    if (!oldLenDesc['[[Writable]]']) {\n      return false;\n    }\n\n    var newWritable;\n\n    if (!('[[Writable]]' in newLenDesc) || newLenDesc['[[Writable]]']) {\n      newWritable = true;\n    } else {\n      newWritable = false;\n      newLenDesc['[[Writable]]'] = true;\n    }\n\n    var succeeded = this.OrdinaryDefineOwnProperty(A, 'length', newLenDesc);\n\n    if (!succeeded) {\n      return false;\n    }\n\n    while (newLen < oldLen) {\n      oldLen -= 1;\n      var deleteSucceeded = delete A[this.ToString(oldLen)];\n\n      if (!deleteSucceeded) {\n        newLenDesc['[[Value]]'] = oldLen + 1;\n\n        if (!newWritable) {\n          newLenDesc['[[Writable]]'] = false;\n          this.OrdinaryDefineOwnProperty(A, 'length', newLenDesc);\n          return false;\n        }\n      }\n    }\n\n    if (!newWritable) {\n      return this.OrdinaryDefineOwnProperty(A, 'length', {\n        '[[Writable]]': false\n      });\n    }\n\n    return true;\n  },\n  // https://www.ecma-international.org/ecma-262/6.0/#sec-createhtml\n  CreateHTML: function CreateHTML(string, tag, attribute, value) {\n    if (this.Type(tag) !== 'String' || this.Type(attribute) !== 'String') {\n      throw new $TypeError('Assertion failed: `tag` and `attribute` must be strings');\n    }\n\n    var str = this.RequireObjectCoercible(string);\n    var S = this.ToString(str);\n    var p1 = '<' + tag;\n\n    if (attribute !== '') {\n      var V = this.ToString(value);\n      var escapedV = $replace(V, /\\x22/g, '&quot;');\n      p1 += '\\x20' + attribute + '\\x3D\\x22' + escapedV + '\\x22';\n    }\n\n    return p1 + '>' + S + '</' + tag + '>';\n  },\n  // https://www.ecma-international.org/ecma-262/6.0/#sec-getownpropertykeys\n  GetOwnPropertyKeys: function GetOwnPropertyKeys(O, Type) {\n    if (this.Type(O) !== 'Object') {\n      throw new $TypeError('Assertion failed: Type(O) is not Object');\n    }\n\n    if (Type === 'Symbol') {\n      return hasSymbols && $gOPS ? $gOPS(O) : [];\n    }\n\n    if (Type === 'String') {\n      if (!$gOPN) {\n        return keys(O);\n      }\n\n      return $gOPN(O);\n    }\n\n    throw new $TypeError('Assertion failed: `Type` must be `\"String\"` or `\"Symbol\"`');\n  },\n  // https://www.ecma-international.org/ecma-262/6.0/#sec-symboldescriptivestring\n  SymbolDescriptiveString: function SymbolDescriptiveString(sym) {\n    if (this.Type(sym) !== 'Symbol') {\n      throw new $TypeError('Assertion failed: `sym` must be a Symbol');\n    }\n\n    return $SymbolToString(sym);\n  },\n  // https://www.ecma-international.org/ecma-262/6.0/#sec-getsubstitution\n  // eslint-disable-next-line max-statements, max-params, max-lines-per-function\n  GetSubstitution: function GetSubstitution(matched, str, position, captures, replacement) {\n    if (this.Type(matched) !== 'String') {\n      throw new $TypeError('Assertion failed: `matched` must be a String');\n    }\n\n    var matchLength = matched.length;\n\n    if (this.Type(str) !== 'String') {\n      throw new $TypeError('Assertion failed: `str` must be a String');\n    }\n\n    var stringLength = str.length;\n\n    if (!this.IsInteger(position) || position < 0 || position > stringLength) {\n      throw new $TypeError('Assertion failed: `position` must be a nonnegative integer, and less than or equal to the length of `string`, got ' + inspect(position));\n    }\n\n    var ES = this;\n\n    var isStringOrHole = function (capture, index, arr) {\n      return ES.Type(capture) === 'String' || !(index in arr);\n    };\n\n    if (!this.IsArray(captures) || !every(captures, isStringOrHole)) {\n      throw new $TypeError('Assertion failed: `captures` must be a List of Strings, got ' + inspect(captures));\n    }\n\n    if (this.Type(replacement) !== 'String') {\n      throw new $TypeError('Assertion failed: `replacement` must be a String');\n    }\n\n    var tailPos = position + matchLength;\n    var m = captures.length;\n    var result = '';\n\n    for (var i = 0; i < replacement.length; i += 1) {\n      // if this is a $, and it's not the end of the replacement\n      var current = replacement[i];\n      var isLast = i + 1 >= replacement.length;\n      var nextIsLast = i + 2 >= replacement.length;\n\n      if (current === '$' && !isLast) {\n        var next = replacement[i + 1];\n\n        if (next === '$') {\n          result += '$';\n          i += 1;\n        } else if (next === '&') {\n          result += matched;\n          i += 1;\n        } else if (next === '`') {\n          result += position === 0 ? '' : strSlice(str, 0, position - 1);\n          i += 1;\n        } else if (next === \"'\") {\n          result += tailPos >= stringLength ? '' : strSlice(str, tailPos);\n          i += 1;\n        } else {\n          var nextNext = nextIsLast ? null : replacement[i + 2];\n\n          if (isDigit(next) && next !== '0' && (nextIsLast || !isDigit(nextNext))) {\n            // $1 through $9, and not followed by a digit\n            var n = parseInteger(next, 10); // if (n > m, impl-defined)\n\n            result += n <= m && this.Type(captures[n - 1]) === 'Undefined' ? '' : captures[n - 1];\n            i += 1;\n          } else if (isDigit(next) && (nextIsLast || isDigit(nextNext))) {\n            // $00 through $99\n            var nn = next + nextNext;\n            var nnI = parseInteger(nn, 10) - 1; // if nn === '00' or nn > m, impl-defined\n\n            result += nn <= m && this.Type(captures[nnI]) === 'Undefined' ? '' : captures[nnI];\n            i += 2;\n          } else {\n            result += '$';\n          }\n        }\n      } else {\n        // the final $, or else not a $\n        result += replacement[i];\n      }\n    }\n\n    return result;\n  },\n  // https://ecma-international.org/ecma-262/6.0/#sec-todatestring\n  ToDateString: function ToDateString(tv) {\n    if (this.Type(tv) !== 'Number') {\n      throw new $TypeError('Assertion failed: `tv` must be a Number');\n    }\n\n    if ($isNaN(tv)) {\n      return 'Invalid Date';\n    }\n\n    return $Date(tv);\n  }\n});\ndelete ES6.CheckObjectCoercible; // renamed in ES6 to RequireObjectCoercible\n\nmodule.exports = ES6;","map":null,"metadata":{},"sourceType":"script"}