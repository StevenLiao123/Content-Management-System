{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = keysOfValidator;\n\nvar _isPrimitive = _interopRequireDefault(require(\"./helpers/isPrimitive\"));\n\nvar _wrapValidator = _interopRequireDefault(require(\"./helpers/wrapValidator\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction keysOfValidator(propType) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'keysOf';\n\n  if (typeof propType !== 'function') {\n    throw new TypeError('argument to keysOf must be a valid PropType function');\n  }\n\n  var validator = function keysOf(props, propName, componentName, location, propFullName) {\n    for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {\n      rest[_key - 5] = arguments[_key];\n    }\n\n    var propValue = props[propName];\n\n    if (propValue == null || (0, _isPrimitive[\"default\"])(propValue)) {\n      return null;\n    }\n\n    var firstError = null;\n    Object.keys(propValue).some(function (key) {\n      firstError = propType.apply(void 0, [_defineProperty({}, key, key), key, componentName, location, \"(\".concat(propFullName, \").\").concat(key)].concat(rest));\n      return firstError != null;\n    });\n    return firstError || null;\n  };\n\n  validator.isRequired = function keyedByRequired(props, propName, componentName) {\n    var propValue = props[propName];\n\n    if (propValue == null) {\n      return new TypeError(\"\".concat(componentName, \": \").concat(propName, \" is required, but value is \").concat(propValue));\n    }\n\n    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n      rest[_key2 - 3] = arguments[_key2];\n    }\n\n    return validator.apply(void 0, [props, propName, componentName].concat(rest));\n  };\n\n  return (0, _wrapValidator[\"default\"])(validator, name, propType);\n}","map":null,"metadata":{},"sourceType":"script"}