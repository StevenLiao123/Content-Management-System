{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('./GetIntrinsic');\n\nvar keys = require('object-keys');\n\nvar inspect = require('object-inspect');\n\nvar ES2017 = require('./es2017');\n\nvar assign = require('./helpers/assign');\n\nvar forEach = require('./helpers/forEach');\n\nvar callBind = require('./helpers/callBind');\n\nvar every = require('./helpers/every');\n\nvar isPrefixOf = require('./helpers/isPrefixOf');\n\nvar $String = GetIntrinsic('%String%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar callBound = require('./helpers/callBound');\n\nvar regexTester = require('./helpers/regexTester');\n\nvar $isNaN = require('./helpers/isNaN');\n\nvar $SymbolValueOf = callBound('Symbol.prototype.valueOf', true); // var $charAt = callBound('String.prototype.charAt');\n\nvar $strSlice = callBound('String.prototype.slice');\nvar $indexOf = callBound('String.prototype.indexOf');\nvar $parseInt = parseInt;\nvar isDigit = regexTester(/^[0-9]$/);\nvar $PromiseResolve = callBound('Promise.resolve', true);\nvar $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');\nvar $pushApply = callBind.apply(GetIntrinsic('%Array.prototype.push%'));\nvar $gOPS = $SymbolValueOf ? GetIntrinsic('%Object.getOwnPropertySymbols%') : null;\n\nvar padTimeComponent = function padTimeComponent(c, count) {\n  return $strSlice('00' + c, -(count || 2));\n};\n\nvar weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\nvar OwnPropertyKeys = function OwnPropertyKeys(ES, source) {\n  var ownKeys = keys(source);\n\n  if ($gOPS) {\n    $pushApply(ownKeys, $gOPS(source));\n  }\n\n  return ownKeys;\n};\n\nvar ES2018 = assign(assign({}, ES2017), {\n  EnumerableOwnPropertyNames: ES2017.EnumerableOwnProperties,\n  // https://ecma-international.org/ecma-262/9.0/#sec-thissymbolvalue\n  thisSymbolValue: function thisSymbolValue(value) {\n    if (!$SymbolValueOf) {\n      throw new SyntaxError('Symbols are not supported; thisSymbolValue requires that `value` be a Symbol or a Symbol object');\n    }\n\n    if (this.Type(value) === 'Symbol') {\n      return value;\n    }\n\n    return $SymbolValueOf(value);\n  },\n  // https://www.ecma-international.org/ecma-262/9.0/#sec-isstringprefix\n  IsStringPrefix: function IsStringPrefix(p, q) {\n    if (this.Type(p) !== 'String') {\n      throw new TypeError('Assertion failed: \"p\" must be a String');\n    }\n\n    if (this.Type(q) !== 'String') {\n      throw new TypeError('Assertion failed: \"q\" must be a String');\n    }\n\n    return isPrefixOf(p, q);\n    /*\n    if (p === q || p === '') {\n    \treturn true;\n    }\n    \tvar pLength = p.length;\n    var qLength = q.length;\n    if (pLength >= qLength) {\n    \treturn false;\n    }\n    \t// assert: pLength < qLength\n    \tfor (var i = 0; i < pLength; i += 1) {\n    \tif ($charAt(p, i) !== $charAt(q, i)) {\n    \t\treturn false;\n    \t}\n    }\n    return true;\n    */\n  },\n  // https://www.ecma-international.org/ecma-262/9.0/#sec-tostring-applied-to-the-number-type\n  NumberToString: function NumberToString(m) {\n    if (this.Type(m) !== 'Number') {\n      throw new TypeError('Assertion failed: \"m\" must be a String');\n    }\n\n    return $String(m);\n  },\n  // https://www.ecma-international.org/ecma-262/9.0/#sec-copydataproperties\n  CopyDataProperties: function CopyDataProperties(target, source, excludedItems) {\n    if (this.Type(target) !== 'Object') {\n      throw new TypeError('Assertion failed: \"target\" must be an Object');\n    }\n\n    if (!this.IsArray(excludedItems)) {\n      throw new TypeError('Assertion failed: \"excludedItems\" must be a List of Property Keys');\n    }\n\n    for (var i = 0; i < excludedItems.length; i += 1) {\n      if (!this.IsPropertyKey(excludedItems[i])) {\n        throw new TypeError('Assertion failed: \"excludedItems\" must be a List of Property Keys');\n      }\n    }\n\n    if (typeof source === 'undefined' || source === null) {\n      return target;\n    }\n\n    var ES = this;\n    var fromObj = ES.ToObject(source);\n    var sourceKeys = OwnPropertyKeys(ES, fromObj);\n    forEach(sourceKeys, function (nextKey) {\n      var excluded = false;\n      forEach(excludedItems, function (e) {\n        if (ES.SameValue(e, nextKey) === true) {\n          excluded = true;\n        }\n      });\n      var enumerable = $isEnumerable(fromObj, nextKey) || // this is to handle string keys being non-enumerable in older engines\n      typeof source === 'string' && nextKey >= 0 && ES.IsInteger(ES.ToNumber(nextKey));\n\n      if (excluded === false && enumerable) {\n        var propValue = ES.Get(fromObj, nextKey);\n        ES.CreateDataProperty(target, nextKey, propValue);\n      }\n    });\n    return target;\n  },\n  // https://ecma-international.org/ecma-262/9.0/#sec-promise-resolve\n  PromiseResolve: function PromiseResolve(C, x) {\n    if (!$PromiseResolve) {\n      throw new SyntaxError('This environment does not support Promises.');\n    }\n\n    return $PromiseResolve(C, x);\n  },\n  // http://www.ecma-international.org/ecma-262/9.0/#sec-getsubstitution\n  // eslint-disable-next-line max-statements, max-params, max-lines-per-function\n  GetSubstitution: function GetSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n    if (this.Type(matched) !== 'String') {\n      throw new $TypeError('Assertion failed: `matched` must be a String');\n    }\n\n    var matchLength = matched.length;\n\n    if (this.Type(str) !== 'String') {\n      throw new $TypeError('Assertion failed: `str` must be a String');\n    }\n\n    var stringLength = str.length;\n\n    if (!this.IsInteger(position) || position < 0 || position > stringLength) {\n      throw new $TypeError('Assertion failed: `position` must be a nonnegative integer, and less than or equal to the length of `string`, got ' + inspect(position));\n    }\n\n    var ES = this;\n\n    var isStringOrHole = function (capture, index, arr) {\n      return ES.Type(capture) === 'String' || !(index in arr);\n    };\n\n    if (!this.IsArray(captures) || !every(captures, isStringOrHole)) {\n      throw new $TypeError('Assertion failed: `captures` must be a List of Strings, got ' + inspect(captures));\n    }\n\n    if (this.Type(replacement) !== 'String') {\n      throw new $TypeError('Assertion failed: `replacement` must be a String');\n    }\n\n    var tailPos = position + matchLength;\n    var m = captures.length;\n\n    if (this.Type(namedCaptures) !== 'Undefined') {\n      namedCaptures = this.ToObject(namedCaptures); // eslint-disable-line no-param-reassign\n    }\n\n    var result = '';\n\n    for (var i = 0; i < replacement.length; i += 1) {\n      // if this is a $, and it's not the end of the replacement\n      var current = replacement[i];\n      var isLast = i + 1 >= replacement.length;\n      var nextIsLast = i + 2 >= replacement.length;\n\n      if (current === '$' && !isLast) {\n        var next = replacement[i + 1];\n\n        if (next === '$') {\n          result += '$';\n          i += 1;\n        } else if (next === '&') {\n          result += matched;\n          i += 1;\n        } else if (next === '`') {\n          result += position === 0 ? '' : $strSlice(str, 0, position - 1);\n          i += 1;\n        } else if (next === \"'\") {\n          result += tailPos >= stringLength ? '' : $strSlice(str, tailPos);\n          i += 1;\n        } else {\n          var nextNext = nextIsLast ? null : replacement[i + 2];\n\n          if (isDigit(next) && next !== '0' && (nextIsLast || !isDigit(nextNext))) {\n            // $1 through $9, and not followed by a digit\n            var n = $parseInt(next, 10); // if (n > m, impl-defined)\n\n            result += n <= m && this.Type(captures[n - 1]) === 'Undefined' ? '' : captures[n - 1];\n            i += 1;\n          } else if (isDigit(next) && (nextIsLast || isDigit(nextNext))) {\n            // $00 through $99\n            var nn = next + nextNext;\n            var nnI = $parseInt(nn, 10) - 1; // if nn === '00' or nn > m, impl-defined\n\n            result += nn <= m && this.Type(captures[nnI]) === 'Undefined' ? '' : captures[nnI];\n            i += 2;\n          } else if (next === '<') {\n            // eslint-disable-next-line max-depth\n            if (this.Type(namedCaptures) === 'Undefined') {\n              result += '$<';\n              i += 2;\n            } else {\n              var endIndex = $indexOf(replacement, '>', i); // eslint-disable-next-line max-depth\n\n              if (endIndex > -1) {\n                var groupName = $strSlice(replacement, i, endIndex);\n                var capture = this.Get(namedCaptures, groupName); // eslint-disable-next-line max-depth\n\n                if (this.Type(capture) !== 'Undefined') {\n                  result += this.ToString(capture);\n                }\n\n                i += '$<' + groupName + '>'.length;\n              }\n            }\n          } else {\n            result += '$';\n          }\n        }\n      } else {\n        // the final $, or else not a $\n        result += replacement[i];\n      }\n    }\n\n    return result;\n  },\n  // https://www.ecma-international.org/ecma-262/9.0/#sec-datestring\n  DateString: function DateString(tv) {\n    if (this.Type(tv) !== 'Number' || $isNaN(tv)) {\n      throw new $TypeError('Assertion failed: `tv` must be a non-NaN Number');\n    }\n\n    var weekday = weekdays[this.WeekDay(tv)];\n    var month = months[this.MonthFromTime(tv)];\n    var day = padTimeComponent(this.DateFromTime(tv));\n    var year = padTimeComponent(this.YearFromTime(tv), 4);\n    return weekday + '\\x20' + month + '\\x20' + day + '\\x20' + year;\n  },\n  // https://www.ecma-international.org/ecma-262/9.0/#sec-timestring\n  TimeString: function TimeString(tv) {\n    if (this.Type(tv) !== 'Number' || $isNaN(tv)) {\n      throw new $TypeError('Assertion failed: `tv` must be a non-NaN Number');\n    }\n\n    var hour = this.HourFromTime(tv);\n    var minute = this.MinFromTime(tv);\n    var second = this.SecFromTime(tv);\n    return padTimeComponent(hour) + ':' + padTimeComponent(minute) + ':' + padTimeComponent(second) + '\\x20GMT';\n  }\n});\ndelete ES2018.EnumerableOwnProperties; // replaced with EnumerableOwnPropertyNames\n\ndelete ES2018.IsPropertyDescriptor; // not an actual abstract operation\n\nmodule.exports = ES2018;","map":null,"metadata":{},"sourceType":"script"}