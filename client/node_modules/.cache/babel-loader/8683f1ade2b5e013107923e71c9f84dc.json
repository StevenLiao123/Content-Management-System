{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = sequenceOfValidator;\n\nvar _propTypes = require(\"prop-types\");\n\nvar _and = _interopRequireDefault(require(\"./and\"));\n\nvar _between = _interopRequireDefault(require(\"./between\"));\n\nvar _nonNegativeInteger = _interopRequireDefault(require(\"./nonNegativeInteger\"));\n\nvar _object = _interopRequireDefault(require(\"./object\"));\n\nvar _withShape = _interopRequireDefault(require(\"./withShape\"));\n\nvar _typeOf = _interopRequireDefault(require(\"./helpers/typeOf\"));\n\nvar _wrapValidator = _interopRequireDefault(require(\"./helpers/wrapValidator\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar minValidator = _nonNegativeInteger[\"default\"];\nvar maxValidator = (0, _and[\"default\"])([_nonNegativeInteger[\"default\"], (0, _between[\"default\"])({\n  gte: 1\n})]);\n\nfunction validateRange(min, max) {\n  if (typeof max !== 'number' || typeof min !== 'number') {\n    return null; // no additional checking needed unless both are present\n  }\n\n  if (min <= max) {\n    return null;\n  }\n\n  return new RangeError('min must be less than or equal to max');\n}\n\nvar specifierShape = {\n  validator: function validator(props, propName) {\n    var propValue = props[propName];\n\n    if (typeof propValue !== 'function') {\n      return new TypeError('\"validator\" must be a propType validator function');\n    }\n\n    return null;\n  },\n  min: function min(props, propName) {\n    return minValidator(props, propName) || validateRange(props.min, props.max);\n  },\n  max: function max(props, propName) {\n    return maxValidator(props, propName) || validateRange(props.min, props.max);\n  }\n};\n\nfunction getMinMax(_ref) {\n  var min = _ref.min,\n      max = _ref.max;\n  var minimum;\n  var maximum;\n\n  if (typeof min !== 'number' && typeof max !== 'number') {\n    // neither provided, default to \"1\"\n    minimum = 1;\n    maximum = 1;\n  } else {\n    minimum = typeof min === 'number' ? min : 1;\n    maximum = typeof max === 'number' ? max : Infinity;\n  }\n\n  return {\n    minimum: minimum,\n    maximum: maximum\n  };\n}\n\nfunction chunkByType(items) {\n  var chunk = [];\n  var lastType;\n  return items.reduce(function (chunks, item) {\n    var itemType = (0, _typeOf[\"default\"])(item);\n\n    if (!lastType || itemType === lastType) {\n      chunk.push(item);\n    } else {\n      chunks.push(chunk);\n      chunk = [item];\n    }\n\n    lastType = itemType;\n    return chunks;\n  }, []).concat(chunk.length > 0 ? [chunk] : []);\n}\n\nfunction validateChunks(specifiers, props, propName, componentName) {\n  var items = props[propName];\n  var chunks = chunkByType(items);\n\n  for (var _len = arguments.length, rest = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {\n    rest[_key - 4] = arguments[_key];\n  }\n\n  for (var i = 0; i < specifiers.length; i += 1) {\n    var _specifiers$i = specifiers[i],\n        validator = _specifiers$i.validator,\n        min = _specifiers$i.min,\n        max = _specifiers$i.max;\n\n    var _getMinMax = getMinMax({\n      min: min,\n      max: max\n    }),\n        minimum = _getMinMax.minimum,\n        maximum = _getMinMax.maximum;\n\n    if (chunks.length === 0 && minimum === 0) {\n      // no chunks left, but this specifier does not require any items\n      continue; // eslint-disable-line no-continue\n    }\n\n    var arrayOfValidator = (0, _propTypes.arrayOf)(validator).isRequired;\n    var chunk = chunks.shift(); // extract the next chunk to test\n\n    var chunkError = arrayOfValidator.apply(void 0, [_objectSpread({}, props, _defineProperty({}, propName, chunk)), propName, componentName].concat(rest));\n\n    if (chunkError) {\n      // this chunk is invalid\n      if (minimum === 0) {\n        // but, specifier has a min of 0 and can be skipped\n        chunks.unshift(chunk); // put the chunk back, for the next iteration\n\n        continue; // eslint-disable-line no-continue\n      }\n\n      return chunkError;\n    } // chunk is valid!\n\n\n    if (chunk.length < minimum) {\n      return new RangeError(\"\".concat(componentName, \": specifier index \").concat(i, \" requires a minimum of \").concat(min, \" items, but only has \").concat(chunk.length, \".\"));\n    }\n\n    if (chunk.length > maximum) {\n      return new RangeError(\"\".concat(componentName, \": specifier index \").concat(i, \" requires a maximum of \").concat(max, \" items, but has \").concat(chunk.length, \".\"));\n    }\n  }\n\n  if (chunks.length > 0) {\n    return new TypeError(\"\".concat(componentName, \": after all \").concat(specifiers.length, \" specifiers matched, \").concat(chunks.length, \" types of items were remaining.\"));\n  }\n\n  return null;\n}\n\nvar specifierValidator = (0, _withShape[\"default\"])((0, _object[\"default\"])(), specifierShape).isRequired;\n\nfunction sequenceOfValidator() {\n  for (var _len2 = arguments.length, specifiers = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    specifiers[_key2] = arguments[_key2];\n  }\n\n  if (specifiers.length === 0) {\n    throw new RangeError('sequenceOf: at least one specifier is required');\n  }\n\n  var errors = specifiers.map(function (specifier, i) {\n    return specifierValidator({\n      specifier: specifier\n    }, 'specifier', 'sequenceOf specifier', \"suequenceOf specifier, index \".concat(i), \"specifier, index \".concat(i));\n  });\n\n  if (errors.some(Boolean)) {\n    throw new TypeError(\"\\n      sequenceOf: all specifiers must match the appropriate shape.\\n\\n      Errors:\\n        \".concat(errors.map(function (e, i) {\n      return \" - Argument index \".concat(i, \": \").concat(e.message);\n    }).join(',\\n        '), \"\\n    \"));\n  }\n\n  var validator = function sequenceOf(props, propName) {\n    var propValue = props[propName];\n\n    if (propValue == null) {\n      return null;\n    }\n\n    for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n      rest[_key3 - 2] = arguments[_key3];\n    }\n\n    var error = _propTypes.array.apply(void 0, [props, propName].concat(rest));\n\n    if (error) {\n      return error;\n    }\n\n    return validateChunks.apply(void 0, [specifiers, props, propName].concat(rest));\n  };\n\n  validator.isRequired = function sequenceOfRequired(props, propName, componentName) {\n    for (var _len4 = arguments.length, rest = new Array(_len4 > 3 ? _len4 - 3 : 0), _key4 = 3; _key4 < _len4; _key4++) {\n      rest[_key4 - 3] = arguments[_key4];\n    }\n\n    var error = _propTypes.array.isRequired.apply(_propTypes.array, [props, propName, componentName].concat(rest));\n\n    if (error) {\n      return error;\n    }\n\n    return validateChunks.apply(void 0, [specifiers, props, propName, componentName].concat(rest));\n  };\n\n  return (0, _wrapValidator[\"default\"])(validator, 'sequenceOf', specifiers);\n}","map":null,"metadata":{},"sourceType":"script"}