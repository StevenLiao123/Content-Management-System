{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nexports.buildPredicate = buildPredicate;\nexports.reduceTreeBySelector = reduceTreeBySelector;\nexports.reduceTreesBySelector = reduceTreesBySelector;\n\nvar _rstSelectorParser = require('rst-selector-parser');\n\nvar _object = require('object.values');\n\nvar _object2 = _interopRequireDefault(_object);\n\nvar _arrayPrototype = require('array.prototype.flat');\n\nvar _arrayPrototype2 = _interopRequireDefault(_arrayPrototype);\n\nvar _objectIs = require('object-is');\n\nvar _objectIs2 = _interopRequireDefault(_objectIs);\n\nvar _has = require('has');\n\nvar _has2 = _interopRequireDefault(_has);\n\nvar _byConstructor = require('html-element-map/byConstructor');\n\nvar _byConstructor2 = _interopRequireDefault(_byConstructor);\n\nvar _RSTTraversal = require('./RSTTraversal');\n\nvar _Utils = require('./Utils');\n\nvar _getAdapter = require('./getAdapter');\n\nvar _getAdapter2 = _interopRequireDefault(_getAdapter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n} // our CSS selector parser instance\n\n\nvar parser = (0, _rstSelectorParser.createParser)(); // Combinators that allow you to chance selectors\n\nvar CHILD = 'childCombinator';\nvar ADJACENT_SIBLING = 'adjacentSiblingCombinator';\nvar GENERAL_SIBLING = 'generalSiblingCombinator';\nvar DESCENDANT = 'descendantCombinator'; // Selectors for targeting elements\n\nvar SELECTOR = 'selector';\nvar TYPE_SELECTOR = 'typeSelector';\nvar CLASS_SELECTOR = 'classSelector';\nvar ID_SELECTOR = 'idSelector';\nvar UNIVERSAL_SELECTOR = 'universalSelector';\nvar ATTRIBUTE_PRESENCE = 'attributePresenceSelector';\nvar ATTRIBUTE_VALUE = 'attributeValueSelector'; // @TODO we dont support these, throw if they are used\n\nvar PSEUDO_CLASS = 'pseudoClassSelector';\nvar PSEUDO_ELEMENT = 'pseudoElementSelector';\nvar EXACT_ATTRIBUTE_OPERATOR = '=';\nvar WHITELIST_ATTRIBUTE_OPERATOR = '~=';\nvar HYPHENATED_ATTRIBUTE_OPERATOR = '|=';\nvar PREFIX_ATTRIBUTE_OPERATOR = '^=';\nvar SUFFIX_ATTRIBUTE_OPERATOR = '$=';\nvar SUBSTRING_ATTRIBUTE_OPERATOR = '*=';\n\nfunction unique(arr) {\n  return [].concat(_toConsumableArray(new Set(arr)));\n}\n/**\n * Calls reduce on a array of nodes with the passed\n * function, returning only unique results.\n * @param {Function} fn\n * @param {Array<Node>} nodes\n */\n\n\nfunction uniqueReduce(fn, nodes) {\n  return unique(nodes.reduce(fn, []));\n}\n/**\n * Takes a CSS selector and returns a set of tokens parsed\n * by scalpel.\n * @param {String} selector\n */\n\n\nfunction safelyGenerateTokens(selector) {\n  try {\n    return parser.parse(selector);\n  } catch (err) {\n    throw new Error('Failed to parse selector: ' + String(selector));\n  }\n}\n\nfunction matchAttributeSelector(node, token) {\n  var operator = token.operator,\n      value = token.value,\n      name = token.name;\n  var nodeProps = (0, _Utils.propsOfNode)(node);\n  var descriptor = Object.getOwnPropertyDescriptor(nodeProps, name);\n\n  if (descriptor && descriptor.get) {\n    return false;\n  }\n\n  var nodePropValue = nodeProps[name];\n\n  if (typeof nodePropValue === 'undefined') {\n    return false;\n  }\n\n  if (token.type === ATTRIBUTE_PRESENCE) {\n    return (0, _has2['default'])(nodeProps, token.name);\n  } // Only the exact value operator (\"=\") can match non-strings\n\n\n  if (typeof nodePropValue !== 'string' || typeof value !== 'string') {\n    if (operator !== EXACT_ATTRIBUTE_OPERATOR) {\n      return false;\n    }\n  }\n\n  switch (operator) {\n    /**\n     * Represents an element with the att attribute whose value is exactly \"val\".\n     * @example\n     * [attr=\"val\"] matches attr=\"val\"\n     */\n    case EXACT_ATTRIBUTE_OPERATOR:\n      return (0, _objectIs2['default'])(nodePropValue, value);\n\n    /**\n     * Represents an element with the att attribute whose value is a whitespace-separated\n     * list of words, one of which is exactly\n     * @example\n     *  [rel~=\"copyright\"] matches rel=\"copyright other\"\n     */\n\n    case WHITELIST_ATTRIBUTE_OPERATOR:\n      return nodePropValue.split(' ').indexOf(value) !== -1;\n\n    /**\n     * Represents an element with the att attribute, its value either being exactly the\n     * value or beginning with the value immediately followed by \"-\"\n     * @example\n     * [hreflang|=\"en\"] matches hreflang=\"en-US\"\n     */\n\n    case HYPHENATED_ATTRIBUTE_OPERATOR:\n      return nodePropValue === value || nodePropValue.startsWith(String(value) + '-');\n\n    /**\n     * Represents an element with the att attribute whose value begins with the prefix value.\n     * If the value is the empty string then the selector does not represent anything.\n     * @example\n     * [type^=\"image\"] matches type=\"imageobject\"\n     */\n\n    case PREFIX_ATTRIBUTE_OPERATOR:\n      return value === '' ? false : nodePropValue.slice(0, value.length) === value;\n\n    /**\n     * Represents an element with the att attribute whose value ends with the suffix value.\n     * If the value is the empty string then the selector does not represent anything.\n     * @example\n     * [type$=\"image\"] matches type=\"imageobject\"\n     */\n\n    case SUFFIX_ATTRIBUTE_OPERATOR:\n      return value === '' ? false : nodePropValue.slice(-value.length) === value;\n\n    /**\n     * Represents an element with the att attribute whose value contains at least one\n     * instance of the value. If value is the empty string then the\n     * selector does not represent anything.\n     * @example\n     * [title*=\"hello\"] matches title=\"well hello there\"\n     */\n\n    case SUBSTRING_ATTRIBUTE_OPERATOR:\n      return value === '' ? false : nodePropValue.indexOf(value) !== -1;\n\n    default:\n      throw new Error('Enzyme::Selector: Unknown attribute selector operator \"' + String(operator) + '\"');\n  }\n}\n\nfunction matchPseudoSelector(node, token, root) {\n  var name = token.name,\n      parameters = token.parameters;\n\n  if (name === 'not') {\n    // eslint-disable-next-line no-use-before-define\n    return parameters.every(function (selector) {\n      return reduceTreeBySelector(selector, node).length === 0;\n    });\n  }\n\n  if (name === 'empty') {\n    return (0, _RSTTraversal.treeFilter)(node, function (n) {\n      return n !== node;\n    }).length === 0;\n  }\n\n  if (name === 'first-child') {\n    var _findParentNode = (0, _RSTTraversal.findParentNode)(root, node),\n        rendered = _findParentNode.rendered;\n\n    var _rendered = _slicedToArray(rendered, 1),\n        firstChild = _rendered[0];\n\n    return firstChild === node;\n  }\n\n  if (name === 'last-child') {\n    var _findParentNode2 = (0, _RSTTraversal.findParentNode)(root, node),\n        _rendered2 = _findParentNode2.rendered;\n\n    return _rendered2[_rendered2.length - 1] === node;\n  }\n\n  if (name === 'focus') {\n    if (typeof document === 'undefined') {\n      throw new Error('Enzyme::Selector does not support the \":focus\" pseudo-element without a global `document`.');\n    }\n\n    var adapter = (0, _getAdapter2['default'])();\n    /* eslint-env browser */\n\n    return document.activeElement && adapter.nodeToHostNode(node) === document.activeElement;\n  }\n\n  throw new TypeError('Enzyme::Selector does not support the \"' + String(token.name) + '\" pseudo-element or pseudo-class selectors.');\n}\n/**\n * Takes a node and a token and determines if the node\n * matches the predicate defined by the token.\n * @param {Node} node\n * @param {Token} token\n */\n\n\nfunction nodeMatchesToken(node, token, root) {\n  if (node === null || typeof node === 'string') {\n    return false;\n  }\n\n  switch (token.type) {\n    /**\n     * Match every node\n     * @example '*' matches every node\n     */\n    case UNIVERSAL_SELECTOR:\n      return true;\n\n    /**\n     * Match against the className prop\n     * @example '.active' matches <div className='active' />\n     */\n\n    case CLASS_SELECTOR:\n      return (0, _RSTTraversal.hasClassName)(node, token.name);\n\n    /**\n     * Simple type matching\n     * @example 'div' matches <div />\n     */\n\n    case TYPE_SELECTOR:\n      return (0, _Utils.nodeHasType)(node, token.name);\n\n    /**\n     * Match against the `id` prop\n     * @example '#nav' matches <ul id=\"nav\" />\n     */\n\n    case ID_SELECTOR:\n      return (0, _RSTTraversal.nodeHasId)(node, token.name);\n\n    /**\n     * Matches if an attribute is present, regardless\n     * of its value\n     * @example '[disabled]' matches <a disabled />\n     */\n\n    case ATTRIBUTE_PRESENCE:\n      return matchAttributeSelector(node, token);\n\n    /**\n     * Matches if an attribute is present with the\n     * provided value\n     * @example '[data-foo=foo]' matches <div data-foo=\"foo\" />\n     */\n\n    case ATTRIBUTE_VALUE:\n      return matchAttributeSelector(node, token);\n\n    case PSEUDO_ELEMENT:\n    case PSEUDO_CLASS:\n      return matchPseudoSelector(node, token, root);\n\n    default:\n      throw new Error('Unknown token type: ' + String(token.type));\n  }\n}\n/**\n * Returns a predicate function that checks if a\n * node matches every token in the body of a selector\n * token.\n * @param {Token} token\n */\n\n\nfunction buildPredicateFromToken(token, root) {\n  return function (node) {\n    return token.body.every(function (bodyToken) {\n      return nodeMatchesToken(node, bodyToken, root);\n    });\n  };\n}\n/**\n * Returns whether a parsed selector is a complex selector, which\n * is defined as a selector that contains combinators.\n * @param {Array<Token>} tokens\n */\n\n\nfunction isComplexSelector(tokens) {\n  return tokens.some(function (token) {\n    return token.type !== SELECTOR;\n  });\n}\n/**\n * Takes a component constructor, object, or string representing\n * a simple selector and returns a predicate function that can\n * be applied to a single node.\n * @param {EnzymeSelector} selector\n */\n\n\nfunction buildPredicate(selector) {\n  // If the selector is a string, parse it as a simple CSS selector\n  if (typeof selector === 'string') {\n    var tokens = safelyGenerateTokens(selector);\n\n    if (isComplexSelector(tokens)) {\n      throw new TypeError('This method does not support complex CSS selectors');\n    } // Simple selectors only have a single selector token\n\n\n    return buildPredicateFromToken(tokens[0]);\n  } // If the selector is an element type, check if the node's type matches\n\n\n  var adapter = (0, _getAdapter2['default'])();\n  var isElementType = adapter.isValidElementType ? adapter.isValidElementType(selector) : typeof selector === 'function';\n\n  if (isElementType) {\n    return function (node) {\n      return adapter.matchesElementType(node, selector);\n    };\n  } // If the selector is an non-empty object, treat the keys/values as props\n\n\n  if ((typeof selector === 'undefined' ? 'undefined' : _typeof(selector)) === 'object') {\n    if (!Array.isArray(selector) && selector !== null && Object.keys(selector).length > 0) {\n      var hasUndefinedValues = (0, _object2['default'])(selector).some(function (value) {\n        return typeof value === 'undefined';\n      });\n\n      if (hasUndefinedValues) {\n        throw new TypeError('Enzyme::Props can’t have `undefined` values. Try using ‘findWhere()’ instead.');\n      }\n\n      return function (node) {\n        return (0, _RSTTraversal.nodeMatchesObjectProps)(node, selector);\n      };\n    }\n\n    throw new TypeError('Enzyme::Selector does not support an array, null, or empty object as a selector');\n  }\n\n  throw new TypeError('Enzyme::Selector expects a string, object, or valid element type (Component Constructor)');\n}\n/**\n * Matches only nodes which are adjacent siblings (direct next sibling)\n * against a predicate, returning those that match.\n * @param {Array<Node>} nodes\n * @param {Function} predicate\n * @param {Node} root\n */\n\n\nfunction matchAdjacentSiblings(nodes, predicate, root) {\n  return nodes.reduce(function (matches, node) {\n    var parent = (0, _RSTTraversal.findParentNode)(root, node); // If there's no parent, there's no siblings\n\n    if (!parent) {\n      return matches;\n    }\n\n    var parentChildren = (0, _RSTTraversal.childrenOfNode)(parent);\n    var nodeIndex = parentChildren.indexOf(node);\n    var adjacentSibling = parentChildren[nodeIndex + 1]; // No sibling\n\n    if (!adjacentSibling) {\n      return matches;\n    }\n\n    if (predicate(adjacentSibling)) {\n      matches.push(adjacentSibling);\n    }\n\n    return matches;\n  }, []);\n}\n/**\n * Matches only nodes which are general siblings (any sibling *after*)\n * against a predicate, returning those that match.\n * @param {Array<Node>} nodes\n * @param {Function} predicate\n * @param {Node} root\n */\n\n\nfunction matchGeneralSibling(nodes, predicate, root) {\n  return uniqueReduce(function (matches, node) {\n    var parent = (0, _RSTTraversal.findParentNode)(root, node);\n\n    if (!parent) {\n      return matches;\n    }\n\n    var parentChildren = (0, _RSTTraversal.childrenOfNode)(parent);\n    var nodeIndex = parentChildren.indexOf(node);\n    var youngerSiblings = parentChildren.slice(nodeIndex + 1);\n    return matches.concat(youngerSiblings.filter(predicate));\n  }, nodes);\n}\n/**\n * Matches only nodes which are direct children (not grandchildren, etc.)\n * against a predicate, returning those that match.\n * @param {Array<Node>} nodes\n * @param {Function} predicate\n */\n\n\nfunction matchDirectChild(nodes, predicate) {\n  return uniqueReduce(function (matches, node) {\n    return matches.concat((0, _RSTTraversal.childrenOfNode)(node).filter(predicate));\n  }, nodes);\n}\n/**\n * Matches all descendant nodes against a predicate,\n * returning those that match.\n * @param {Array<Node>} nodes\n * @param {Function} predicate\n */\n\n\nfunction matchDescendant(nodes, predicate) {\n  return uniqueReduce(function (matches, node) {\n    return matches.concat((0, _RSTTraversal.treeFilter)(node, predicate));\n  }, (0, _arrayPrototype2['default'])(nodes.map(_RSTTraversal.childrenOfNode)));\n}\n/**\n * Takes an RST and reduces it to a set of nodes matching\n * the selector. The selector can be a simple selector, which\n * is handled by `buildPredicate`, or a complex CSS selector which\n * reduceTreeBySelector parses and reduces the tree based on the combinators.\n *\n * @param {EnzymeSelector} selector\n * @param {RSTNode} root\n */\n\n\nfunction reduceTreeBySelector(selector, root) {\n  if (typeof selector !== 'string') {\n    var elements = (0, _byConstructor2['default'])(selector);\n\n    if (elements.length > 0) {\n      return (0, _arrayPrototype2['default'])(elements.map(function (x) {\n        return reduceTreeBySelector(x.tag, root);\n      })); // when https://github.com/aweary/rst-selector-parser/issues/15 is resolved\n      // const htmlTagNames = elements.map(x => x.tag).join(', ');\n      // return reduceTreeBySelector(htmlTagNames, root);\n    }\n  }\n\n  if (typeof selector === 'function' || (typeof selector === 'undefined' ? 'undefined' : _typeof(selector)) === 'object') {\n    return (0, _RSTTraversal.treeFilter)(root, buildPredicate(selector));\n  }\n\n  var results = [];\n\n  if (typeof selector === 'string') {\n    var tokens = safelyGenerateTokens(selector);\n    var index = 0;\n\n    while (index < tokens.length) {\n      var token = tokens[index];\n      /**\n       * There are two types of tokens in a CSS selector:\n       *\n       * 1. Selector tokens. These target nodes directly, like\n       *    type or attribute selectors. These are easy to apply\n       *    because we can traverse the tree and return only\n       *    the nodes that match the predicate.\n       *\n       * 2. Combinator tokens. These tokens chain together\n       *    selector nodes. For example > for children, or +\n       *    for adjacent siblings. These are harder to match\n       *    as we have to track where in the tree we are\n       *    to determine if a selector node applies or not.\n       */\n\n      if (token.type === SELECTOR) {\n        var predicate = buildPredicateFromToken(token, root);\n        results = results.concat((0, _RSTTraversal.treeFilter)(root, predicate));\n      } else {\n        // We can assume there always all previously matched tokens since selectors\n        // cannot start with combinators.\n        var type = token.type; // We assume the next token is a selector, so move the index\n        // forward and build the predicate.\n\n        index += 1;\n\n        var _predicate = buildPredicateFromToken(tokens[index], root); // We match against only the nodes which have already been matched,\n        // since a combinator is meant to refine a previous selector.\n\n\n        switch (type) {\n          // The + combinator\n          case ADJACENT_SIBLING:\n            results = matchAdjacentSiblings(results, _predicate, root);\n            break;\n          // The ~ combinator\n\n          case GENERAL_SIBLING:\n            results = matchGeneralSibling(results, _predicate, root);\n            break;\n          // The > combinator\n\n          case CHILD:\n            results = matchDirectChild(results, _predicate);\n            break;\n          // The ' ' (whitespace) combinator\n\n          case DESCENDANT:\n            {\n              results = matchDescendant(results, _predicate);\n              break;\n            }\n\n          default:\n            throw new Error('Unknown combinator selector: ' + String(type));\n        }\n      }\n\n      index += 1;\n    }\n  } else {\n    throw new TypeError('Enzyme::Selector expects a string, object, or Component Constructor');\n  }\n\n  return results;\n}\n\nfunction reduceTreesBySelector(selector, roots) {\n  var results = roots.map(function (n) {\n    return reduceTreeBySelector(selector, n);\n  });\n  return unique((0, _arrayPrototype2['default'])(results, 1));\n} //# sourceMappingURL=selectors.js.map","map":null,"metadata":{},"sourceType":"script"}