{"ast":null,"code":"import \"antd/es/modal/style\";\nimport _Modal from \"antd/es/modal\";\nvar _jsxFileName = \"/Users/stevenl/Desktop/Projects/Content-Management-System/client/src/components/header/index.js\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport menuList from '../../config/menuConfig';\nimport { reqWeather } from '../../api';\nimport memoryUtils from '../../utils/memoryUtils';\nimport { formatDate } from '../../utils/dateUtils';\nimport './index.less';\nimport { setInterval } from 'timers';\n\nclass Header extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentTime: formatDate(Date.now()),\n      name: '',\n      temp: '',\n      icon: ''\n    };\n\n    this.getCurrentTime = () => {\n      // get the current time per 1 second and then update the state of currentTime\n      setInterval(() => {\n        const currentTime = formatDate(Date.now());\n        this.setState({\n          currentTime\n        });\n      }, 1000);\n    };\n\n    this.getWeather = async () => {\n      // get the weather data by invoking the asynchronus API\n      const _ref = await reqWeather('Sydney'),\n            name = _ref.name,\n            temp = _ref.temp,\n            icon = _ref.icon; // update the state\n\n\n      this.setState({\n        name,\n        temp,\n        icon\n      });\n    };\n\n    this.getTitle = () => {\n      // get the current path\n      const path = this.props.location.pathname;\n      let title;\n      menuList.forEach(item => {\n        // the title of item of menulist is the title that should be display on the main page if the key of item totally equal to the current path\n        if (item.key === path) {\n          title = item.title;\n        } else if (item.children) {\n          // use the same login in children to find the key of item equal to path and then get the corresponding title\n          item.children.find(subItem => {\n            if (subItem.key === path) {\n              title = subItem.title;\n            }\n          });\n        }\n      });\n      return title;\n    };\n\n    this.logout = () => {\n      _Modal.confirm({\n        title: 'Do you Want to logout?',\n        onOk: () => {\n          console.log(this); // delete the data of user in localStorage\n          // jump to the login page\n\n          this.props.history.replace('/login');\n        }\n      });\n    };\n\n    this.convertKelvinToCelsius = temp => {\n      if (temp < 0) {\n        return 'below absolute zero (0 K)';\n      } else {\n        return temp - 273.15;\n      }\n    };\n  }\n\n  componentDidMount() {\n    // get the current time\n    this.getCurrentTime(); // get the current weather\n\n    this.getWeather(); // get the Celsius\n\n    this.convertKelvinToCelsius();\n  }\n\n  render() {\n    const _this$state = this.state,\n          currentTime = _this$state.currentTime,\n          name = _this$state.name,\n          temp = _this$state.temp,\n          icon = _this$state.icon;\n    const iconUrl = \"http://openweathermap.org/img/wn/\".concat(icon, \"@2x.png\");\n    const username = memoryUtils.user[0].username;\n    const title = this.getTitle();\n    return React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header-top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Hello, \", username), React.createElement(\"a\", {\n      href: \"javascript:\",\n      onClick: this.logout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Logout\")), React.createElement(\"div\", {\n      className: \"header-bottom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header-bottom-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, title), React.createElement(\"div\", {\n      className: \"header-bottom-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, currentTime), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, name), React.createElement(\"img\", {\n      src: iconUrl,\n      alt: \"weather\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, this.convertKelvinToCelsius(temp).toFixed(1) + \"\\xB0C\"))));\n  }\n\n}\n\nexport default withRouter(Header);","map":{"version":3,"sources":["/Users/stevenl/Desktop/Projects/Content-Management-System/client/src/components/header/index.js"],"names":["React","Component","withRouter","menuList","reqWeather","memoryUtils","formatDate","setInterval","Header","state","currentTime","Date","now","name","temp","icon","getCurrentTime","setState","getWeather","getTitle","path","props","location","pathname","title","forEach","item","key","children","find","subItem","logout","confirm","onOk","console","log","history","replace","convertKelvinToCelsius","componentDidMount","render","iconUrl","username","user","toFixed"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport { Modal } from 'antd';\nimport menuList from '../../config/menuConfig';\nimport { reqWeather } from '../../api';\nimport memoryUtils from '../../utils/memoryUtils';\nimport { formatDate } from '../../utils/dateUtils';\nimport './index.less';\nimport { setInterval } from 'timers';\n\nclass Header extends Component {\n    \n    state = {\n        currentTime: formatDate(Date.now()),\n        name: '',\n        temp: '',\n        icon: '',\n    }\n\n    getCurrentTime = () => {\n        // get the current time per 1 second and then update the state of currentTime\n        setInterval(() => {\n            const currentTime = formatDate(Date.now());\n            this.setState({currentTime});\n        }, 1000);\n    }\n\n    getWeather = async () => {\n        // get the weather data by invoking the asynchronus API\n        const { name, temp, icon } = await reqWeather('Sydney');\n\n        // update the state\n        this.setState({ name, temp, icon });\n    }\n\n    getTitle = () => {\n        // get the current path\n        const path = this.props.location.pathname;\n        let title;\n        menuList.forEach(item => {\n            // the title of item of menulist is the title that should be display on the main page if the key of item totally equal to the current path\n            if(item.key === path) {\n                title = item.title;\n            } else if(item.children) {\n                // use the same login in children to find the key of item equal to path and then get the corresponding title\n                item.children.find(subItem => {\n                    if(subItem.key === path) {\n                        title = subItem.title;\n                    }\n                });\n            }\n        });\n        return title;\n    }\n\n    logout = () => {\n       Modal.confirm({\n        title: 'Do you Want to logout?',\n        onOk: () => {\n            console.log(this);\n          // delete the data of user in localStorage\n\n          // jump to the login page\n          this.props.history.replace('/login');\n        }\n      }); \n    }\n\n    convertKelvinToCelsius = (temp) => {\n        if (temp < (0)) {\n            return 'below absolute zero (0 K)';\n        } else {\n            return (temp-273.15);\n        }\n    }\n\n    componentDidMount() {\n        // get the current time\n        this.getCurrentTime();\n\n        // get the current weather\n        this.getWeather();\n\n        // get the Celsius\n        this.convertKelvinToCelsius();\n    }\n\n    render() {\n        const { currentTime, name, temp, icon } = this.state;\n        const iconUrl = `http://openweathermap.org/img/wn/${icon}@2x.png`;\n        const username = memoryUtils.user[0].username;\n        const title = this.getTitle();\n\n        return (\n            <div className=\"header\">\n                <div className=\"header-top\">\n                    <span>Hello, {username}</span>\n                    <a href=\"javascript:\" onClick={this.logout}>Logout</a>\n                </div>\n                <div className=\"header-bottom\">\n                    <div className=\"header-bottom-left\">{title}</div>\n                    <div className=\"header-bottom-right\">\n                        <span>{currentTime}</span>\n                        <span>{name}</span>\n                        <img src={iconUrl} alt=\"weather\"/>\n                        <span>{this.convertKelvinToCelsius(temp).toFixed(1)+`°C`}</span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Header);"]},"metadata":{},"sourceType":"module"}