{"ast":null,"code":"import \"antd/es/card/style\";\nimport _Card from \"antd/es/card\";\nimport \"antd/es/table/style\";\nimport _Table from \"antd/es/table\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nvar _jsxFileName = \"/Users/stevenl/Desktop/Projects/Content-Management-System/client/src/containers/category/category.js\";\nimport React, { Component } from 'react';\nimport LinkButton from '../../components/link-button';\nimport { reqCategories } from '../../api';\nexport default class Category extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      categories: [],\n      // first level category\n      subCategories: [],\n      loading: false,\n      // used to determine whether it is in the process of getting data\n      parentId: 'a',\n      // the parent Id of the first level category\n      parentName: '' // the name of the first level category\n\n    };\n\n    this.initColumns = () => {\n      this.columns = [{\n        title: 'Category',\n        dataIndex: 'name'\n      }, {\n        title: 'Action',\n        width: 300,\n        render: category => // return the tags for actions\n        React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        }, React.createElement(LinkButton, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }, \"Edit\"), this.state.parentId === 'a' ? React.createElement(LinkButton, {\n          onClick: () => this.showSubCategories(category),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }, \"Check sub-categories\") : null)\n      }];\n    };\n\n    this.getCategories = async () => {\n      // show loading before send the request\n      this.setState({\n        loading: true\n      });\n      const parentId = this.state.parentId;\n      const categories = await reqCategories(parentId);\n      this.setState({\n        loading: false\n      });\n\n      if (categories) {\n        if (parentId === 'a') {\n          this.setState({\n            categories\n          });\n        } else {\n          this.setState({\n            subCategories: categories\n          });\n        }\n      } else {\n        _message.error('failed to get category!');\n      }\n    };\n\n    this.showSubCategories = category => {\n      // update the state \n      // * setState() is an asynchrnous update now, so we have to put getCategories() in callback so that we can get the new parentId!\n      this.setState({\n        parentId: category._id,\n        parentName: category.name\n      }, () => {\n        // get the sub categories\n        this.getCategories();\n      });\n    };\n  }\n\n  // used to load data before the first render\n  componentWillMount() {\n    this.initColumns();\n  } // for ajax request \n\n\n  componentDidMount() {\n    this.getCategories();\n  }\n\n  render() {\n    const _this$state = this.state,\n          categories = _this$state.categories,\n          subCategories = _this$state.subCategories,\n          parentId = _this$state.parentId,\n          parentName = _this$state.parentName,\n          loading = _this$state.loading; // setup the left side of card\n\n    const title = parentId === 'a' ? \"Product's categories\" : React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(LinkButton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Product's categories\"), React.createElement(_Icon, {\n      type: \"arrow-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \" \", parentName)); // setup the right side of card\n\n    const extra = React.createElement(_Button, {\n      type: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(_Icon, {\n      type: \"plus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), \"Add\");\n    return React.createElement(_Card, {\n      title: title,\n      extra: extra,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(_Table, {\n      bordered: true,\n      rowKey: \"_id\",\n      loading: loading,\n      dataSource: parentId === 'a' ? categories : subCategories,\n      columns: this.columns,\n      pagination: {\n        defaultPageSize: 6,\n        showQuickJumper: true\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/stevenl/Desktop/Projects/Content-Management-System/client/src/containers/category/category.js"],"names":["React","Component","LinkButton","reqCategories","Category","state","categories","subCategories","loading","parentId","parentName","initColumns","columns","title","dataIndex","width","render","category","showSubCategories","getCategories","setState","error","_id","name","componentWillMount","componentDidMount","extra","defaultPageSize","showQuickJumper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Card, Table, Button, Icon, message } from 'antd';\n\nimport LinkButton from '../../components/link-button';\nimport { reqCategories } from '../../api';\n\nexport default class Category extends Component {\n\n    state = {\n        categories: [], // first level category\n        subCategories: [],\n        loading: false, // used to determine whether it is in the process of getting data\n        parentId: 'a', // the parent Id of the first level category\n        parentName: '', // the name of the first level category\n    }\n\n    // initiate the column of table \n    initColumns = () => {\n        this.columns = [\n            {\n                title: 'Category',\n                dataIndex: 'name',\n            },\n            {\n                title: 'Action',\n                width: 300,\n                render: (category) => ( // return the tags for actions\n                    <span>\n                        <LinkButton>Edit</LinkButton>\n                        {this.state.parentId === 'a' ? <LinkButton onClick={() => this.showSubCategories(category)}>Check sub-categories</LinkButton> : null}\n                    </span>\n                )\n            },\n        ]\n    }\n\n    // get a list of categories by ajax \n    getCategories = async () => {\n        // show loading before send the request\n        this.setState({ loading: true });\n        const { parentId } = this.state;\n\n        const categories = await reqCategories(parentId);\n\n        this.setState({ loading: false });\n\n        if (categories) {\n            if (parentId === 'a') {\n                this.setState({\n                    categories\n                });\n            } else {\n                this.setState({\n                    subCategories: categories\n                });\n            }\n\n        } else {\n            message.error('failed to get category!');\n        }\n\n    }\n\n    // show the sub categories based on the parent category\n    showSubCategories = (category) => {\n        // update the state \n        // * setState() is an asynchrnous update now, so we have to put getCategories() in callback so that we can get the new parentId!\n        this.setState({\n            parentId: category._id,\n            parentName: category.name\n        }, () => {\n            // get the sub categories\n            this.getCategories();\n        });\n    }\n\n    // used to load data before the first render\n    componentWillMount() {\n        this.initColumns();\n    }\n\n    // for ajax request \n    componentDidMount() {\n        this.getCategories();\n    }\n\n    render() {\n\n        const { categories, subCategories, parentId, parentName, loading } = this.state;\n\n        // setup the left side of card\n        const title = parentId === 'a' ? \"Product's categories\" : (\n            <span>\n                <LinkButton>Product's categories</LinkButton>\n                <Icon type='arrow-right' />\n                <span> {parentName}</span>\n            </span>\n        );\n\n        // setup the right side of card\n        const extra = (\n            <Button type=\"primary\">\n                <Icon type=\"plus\" />\n                Add\n            </Button>\n        );\n\n        return (\n            <Card title={title} extra={extra} >\n                <Table\n                    bordered\n                    rowKey='_id'\n                    loading={loading}\n                    dataSource={parentId === 'a' ? categories : subCategories}\n                    columns={this.columns}\n                    pagination={{ defaultPageSize: 6, showQuickJumper: true }}\n                />\n            </Card>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}