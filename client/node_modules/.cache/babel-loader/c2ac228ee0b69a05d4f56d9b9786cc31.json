{"ast":null,"code":"import \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nvar _jsxFileName = \"/Users/stevenl/Desktop/Projects/Content-Management-System/client/src/containers/Login/Login.js\";\nimport React, { Component } from 'react';\nimport { reqLogin } from '../../api';\nimport './login.less';\nimport logo from './images/logo.jpeg';\n\nclass Login extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = e => {\n      // the default action that belongs to the event will be cancelled !! sd sadasd\n      e.preventDefault(); // validate the value from input\n\n      this.props.form.validateFields(async (err, values) => {\n        if (!err) {\n          //console.log('Submit success!', values);\n          const username = values.username,\n                password = values.password;\n\n          try {\n            const response = await reqLogin(username, password);\n            console.log('Login successful!', response.data);\n          } catch (error) {\n            alert('Username or password is incorrect!' + error.message);\n          }\n        } else {\n          console.log('Submit is failed!');\n        }\n      });\n    };\n\n    this.validatePassword = (rule, value, callback) => {\n      console.log('validatePassword', rule, value);\n\n      if (!value) {\n        callback('Please input your password!');\n      } else if (value.length < 4) {\n        callback('Please input at least 4 characters!');\n      } else if (value.length > 12) {\n        callback('Please do not input more than 12 characters!');\n      } else if (!/^[a-zA-Z0-9_]+$/.test(value)) {\n        callback('Please includes english and numbers!');\n      } else {\n        callback();\n      }\n    };\n  }\n\n  render() {\n    const form = this.props.form;\n    const getFieldDecorator = form.getFieldDecorator;\n    return React.createElement(\"div\", {\n      className: \"login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"login-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Content Management System\")), React.createElement(\"section\", {\n      className: \"login-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Login\"), React.createElement(_Form, {\n      onSubmit: this.handleSubmit,\n      className: \"login-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(_Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, getFieldDecorator('username', {\n      rules: [{\n        required: true,\n        whitespace: true,\n        message: 'Please input your username!'\n      }, {\n        min: 4,\n        message: 'Please input at least 4 characters!'\n      }, {\n        max: 12,\n        message: 'Please do not input more than 12 characters!'\n      }, {\n        pattern: /^[a-zA-Z0-9_]+$/,\n        message: 'Please includes english and numbers!'\n      }]\n    })(React.createElement(_Input, {\n      prefix: React.createElement(_Icon, {\n        type: \"user\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }),\n      placeholder: \"Username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }))), React.createElement(_Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        validator: this.validatePassword\n      }]\n    })(React.createElement(_Input, {\n      prefix: React.createElement(_Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }),\n      type: \"password\",\n      placeholder: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }))), React.createElement(_Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(_Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"login-form-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Log in\")))));\n  }\n\n} //Form.create()() is a higher order function(HOF) and WrappedLogin is a higher order component(HOC)\n\n\nconst WrappedLogin = _Form.create()(Login);\n\nexport default WrappedLogin;","map":{"version":3,"sources":["/Users/stevenl/Desktop/Projects/Content-Management-System/client/src/containers/Login/Login.js"],"names":["React","Component","reqLogin","logo","Login","handleSubmit","e","preventDefault","props","form","validateFields","err","values","username","password","response","console","log","data","error","alert","message","validatePassword","rule","value","callback","length","test","render","getFieldDecorator","rules","required","whitespace","min","max","pattern","color","validator","WrappedLogin","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Icon, Input, Button } from 'antd';\nimport { reqLogin } from '../../api';\n\nimport './login.less';\nimport logo from './images/logo.jpeg';\n\nclass Login extends Component {\n\n    handleSubmit = e => {\n        // the default action that belongs to the event will be cancelled !! sd sadasd\n        e.preventDefault();\n        // validate the value from input\n        this.props.form.validateFields(async (err, values) => {\n            if (!err) {\n                //console.log('Submit success!', values);\n                const {username, password} = values;\n                try {\n                    const response = await reqLogin(username, password);\n                    console.log('Login successful!', response.data);\n                } catch(error) {\n                    alert('Username or password is incorrect!' + error.message);\n                }\n            } else {\n                console.log('Submit is failed!');\n            }\n        });\n    };\n\n    // custom validation for password\n    validatePassword = (rule, value, callback) => {\n        console.log('validatePassword', rule, value);\n        if(!value) {\n            callback('Please input your password!');\n        } else if(value.length < 4) {\n            callback('Please input at least 4 characters!');\n        } else if(value.length > 12) {\n            callback('Please do not input more than 12 characters!');\n        } else if(!/^[a-zA-Z0-9_]+$/.test(value)) {\n            callback('Please includes english and numbers!');\n        } else {\n            callback();\n        }\n    }\n\n    render() {\n        const form = this.props.form;\n        const { getFieldDecorator } = form;\n\n        return (\n            <div className=\"login\">\n                <header className=\"login-header\">\n                    <img src={logo} alt=\"logo\" />\n                    <h1>Content Management System</h1>\n                </header>\n                <section className=\"login-content\">\n                    <h2>Login</h2>\n                    <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                        <Form.Item>\n                            {\n                                /* \n                                    setup the input for collecting data and validating the values\n                                */\n                            }\n                            {getFieldDecorator('username', {\n                                rules:[\n                                    { \n                                        required: true, \n                                        whitespace: true,\n                                        message: 'Please input your username!'\n                                    },\n                                    { \n                                        min: 4, \n                                        message: 'Please input at least 4 characters!'\n                                    },\n                                    { \n                                        max: 12, \n                                        message: 'Please do not input more than 12 characters!'\n                                    },\n                                    { \n                                        pattern: /^[a-zA-Z0-9_]+$/, \n                                        message: 'Please includes english and numbers!'\n                                    },                              \n                                ],    \n                            })(<Input\n                                prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                placeholder=\"Username\"\n                            />,\n                            )}\n                        </Form.Item>\n                        <Form.Item>\n                            {getFieldDecorator('password', {\n                                rules:[\n                                {\n                                    validator: this.validatePassword\n                                }],\n                            })(<Input\n                                prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                type=\"password\"\n                                placeholder=\"Password\"\n                            />)}\n                        </Form.Item>\n                        <Form.Item>\n                            <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                                Log in\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </section>\n            </div>\n        )\n    }\n}\n\n//Form.create()() is a higher order function(HOF) and WrappedLogin is a higher order component(HOC)\nconst WrappedLogin = Form.create()(Login);\nexport default WrappedLogin;\n"]},"metadata":{},"sourceType":"module"}